
Assignment_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08002a70  08002a70  00012a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b58  08002b58  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08002b58  08002b58  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b58  08002b58  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b58  08002b58  00012b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b5c  08002b5c  00012b5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08002b60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000134  20000090  08002bf0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001c4  08002bf0  000201c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000057d3  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013be  00000000  00000000  00025893  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000690  00000000  00000000  00026c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005d8  00000000  00000000  000272e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003c66  00000000  00000000  000278c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006e12  00000000  00000000  0002b526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005a9ac  00000000  00000000  00032338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008cce4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002378  00000000  00000000  0008cd34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002a58 	.word	0x08002a58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08002a58 	.word	0x08002a58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <EXTI_Init>:
  * @retval None
  */
  

void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8000278:	2300      	movs	r3, #0
 800027a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE_ALL(EXTI_InitStruct->EXTI_Line));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 800027c:	4b7b      	ldr	r3, [pc, #492]	; (800046c <EXTI_Init+0x1fc>)
 800027e:	60fb      	str	r3, [r7, #12]
      
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	799b      	ldrb	r3, [r3, #6]
 8000284:	2b00      	cmp	r3, #0
 8000286:	f000 80d2 	beq.w	800042e <EXTI_Init+0x1be>
  {
    /* Clear EXTI line configuration */   
    *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));   
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	095b      	lsrs	r3, r3, #5
 8000290:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000294:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8000298:	015b      	lsls	r3, r3, #5
 800029a:	6819      	ldr	r1, [r3, #0]
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	f003 031f 	and.w	r3, r3, #31
 80002a4:	2201      	movs	r2, #1
 80002a6:	fa02 f303 	lsl.w	r3, r2, r3
 80002aa:	43da      	mvns	r2, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	095b      	lsrs	r3, r3, #5
 80002b2:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 80002b6:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 80002ba:	015b      	lsls	r3, r3, #5
 80002bc:	4618      	mov	r0, r3
 80002be:	ea01 0302 	and.w	r3, r1, r2
 80002c2:	6003      	str	r3, [r0, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->EMR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	095b      	lsrs	r3, r3, #5
 80002ca:	015a      	lsls	r2, r3, #5
 80002cc:	4b68      	ldr	r3, [pc, #416]	; (8000470 <EXTI_Init+0x200>)
 80002ce:	4413      	add	r3, r2
 80002d0:	6819      	ldr	r1, [r3, #0]
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f003 031f 	and.w	r3, r3, #31
 80002da:	2201      	movs	r2, #1
 80002dc:	fa02 f303 	lsl.w	r3, r2, r3
 80002e0:	43da      	mvns	r2, r3
 80002e2:	687b      	ldr	r3, [r7, #4]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	095b      	lsrs	r3, r3, #5
 80002e8:	0158      	lsls	r0, r3, #5
 80002ea:	4b61      	ldr	r3, [pc, #388]	; (8000470 <EXTI_Init+0x200>)
 80002ec:	4403      	add	r3, r0
 80002ee:	4618      	mov	r0, r3
 80002f0:	ea01 0302 	and.w	r3, r1, r2
 80002f4:	6003      	str	r3, [r0, #0]
     
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	791b      	ldrb	r3, [r3, #4]
 80002fa:	461a      	mov	r2, r3
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	095b      	lsrs	r3, r3, #5
 8000302:	015b      	lsls	r3, r3, #5
 8000304:	4413      	add	r3, r2
 8000306:	68fa      	ldr	r2, [r7, #12]
 8000308:	4413      	add	r3, r2
 800030a:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	681a      	ldr	r2, [r3, #0]
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	f003 031f 	and.w	r3, r3, #31
 8000318:	2101      	movs	r1, #1
 800031a:	fa01 f303 	lsl.w	r3, r1, r3
 800031e:	4619      	mov	r1, r3
 8000320:	68fb      	ldr	r3, [r7, #12]
 8000322:	430a      	orrs	r2, r1
 8000324:	601a      	str	r2, [r3, #0]
    
    tmp = (uint32_t)EXTI_BASE;
 8000326:	4b51      	ldr	r3, [pc, #324]	; (800046c <EXTI_Init+0x1fc>)
 8000328:	60fb      	str	r3, [r7, #12]

    /* Clear Rising Falling edge configuration */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	095b      	lsrs	r3, r3, #5
 8000330:	015a      	lsls	r2, r3, #5
 8000332:	4b50      	ldr	r3, [pc, #320]	; (8000474 <EXTI_Init+0x204>)
 8000334:	4413      	add	r3, r2
 8000336:	6819      	ldr	r1, [r3, #0]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	f003 031f 	and.w	r3, r3, #31
 8000340:	2201      	movs	r2, #1
 8000342:	fa02 f303 	lsl.w	r3, r2, r3
 8000346:	43da      	mvns	r2, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	095b      	lsrs	r3, r3, #5
 800034e:	0158      	lsls	r0, r3, #5
 8000350:	4b48      	ldr	r3, [pc, #288]	; (8000474 <EXTI_Init+0x204>)
 8000352:	4403      	add	r3, r0
 8000354:	4618      	mov	r0, r3
 8000356:	ea01 0302 	and.w	r3, r1, r2
 800035a:	6003      	str	r3, [r0, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	095b      	lsrs	r3, r3, #5
 8000362:	015a      	lsls	r2, r3, #5
 8000364:	4b44      	ldr	r3, [pc, #272]	; (8000478 <EXTI_Init+0x208>)
 8000366:	4413      	add	r3, r2
 8000368:	6819      	ldr	r1, [r3, #0]
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f003 031f 	and.w	r3, r3, #31
 8000372:	2201      	movs	r2, #1
 8000374:	fa02 f303 	lsl.w	r3, r2, r3
 8000378:	43da      	mvns	r2, r3
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	095b      	lsrs	r3, r3, #5
 8000380:	0158      	lsls	r0, r3, #5
 8000382:	4b3d      	ldr	r3, [pc, #244]	; (8000478 <EXTI_Init+0x208>)
 8000384:	4403      	add	r3, r0
 8000386:	4618      	mov	r0, r3
 8000388:	ea01 0302 	and.w	r3, r1, r2
 800038c:	6003      	str	r3, [r0, #0]
    
      /* Select the trigger for the selected interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	795b      	ldrb	r3, [r3, #5]
 8000392:	2b10      	cmp	r3, #16
 8000394:	d132      	bne.n	80003fc <EXTI_Init+0x18c>
    {
      /* Rising Falling edge */
    *(__IO uint32_t *) (((uint32_t) &(EXTI->RTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	095b      	lsrs	r3, r3, #5
 800039c:	015a      	lsls	r2, r3, #5
 800039e:	4b35      	ldr	r3, [pc, #212]	; (8000474 <EXTI_Init+0x204>)
 80003a0:	4413      	add	r3, r2
 80003a2:	681a      	ldr	r2, [r3, #0]
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	f003 031f 	and.w	r3, r3, #31
 80003ac:	2101      	movs	r1, #1
 80003ae:	fa01 f303 	lsl.w	r3, r1, r3
 80003b2:	4618      	mov	r0, r3
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	095b      	lsrs	r3, r3, #5
 80003ba:	0159      	lsls	r1, r3, #5
 80003bc:	4b2d      	ldr	r3, [pc, #180]	; (8000474 <EXTI_Init+0x204>)
 80003be:	440b      	add	r3, r1
 80003c0:	4619      	mov	r1, r3
 80003c2:	ea42 0300 	orr.w	r3, r2, r0
 80003c6:	600b      	str	r3, [r1, #0]
    *(__IO uint32_t *) (((uint32_t) &(EXTI->FTSR)) + ((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));      
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	095b      	lsrs	r3, r3, #5
 80003ce:	015a      	lsls	r2, r3, #5
 80003d0:	4b29      	ldr	r3, [pc, #164]	; (8000478 <EXTI_Init+0x208>)
 80003d2:	4413      	add	r3, r2
 80003d4:	681a      	ldr	r2, [r3, #0]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	f003 031f 	and.w	r3, r3, #31
 80003de:	2101      	movs	r1, #1
 80003e0:	fa01 f303 	lsl.w	r3, r1, r3
 80003e4:	4618      	mov	r0, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	095b      	lsrs	r3, r3, #5
 80003ec:	0159      	lsls	r1, r3, #5
 80003ee:	4b22      	ldr	r3, [pc, #136]	; (8000478 <EXTI_Init+0x208>)
 80003f0:	440b      	add	r3, r1
 80003f2:	4619      	mov	r1, r3
 80003f4:	ea42 0300 	orr.w	r3, r2, r0
 80003f8:	600b      	str	r3, [r1, #0]

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
  }
         
}
 80003fa:	e030      	b.n	800045e <EXTI_Init+0x1ee>
      tmp += EXTI_InitStruct->EXTI_Trigger + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	795b      	ldrb	r3, [r3, #5]
 8000400:	461a      	mov	r2, r3
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	095b      	lsrs	r3, r3, #5
 8000408:	015b      	lsls	r3, r3, #5
 800040a:	4413      	add	r3, r2
 800040c:	68fa      	ldr	r2, [r7, #12]
 800040e:	4413      	add	r3, r2
 8000410:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000412:	68fb      	ldr	r3, [r7, #12]
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f003 031f 	and.w	r3, r3, #31
 800041e:	2101      	movs	r1, #1
 8000420:	fa01 f303 	lsl.w	r3, r1, r3
 8000424:	4619      	mov	r1, r3
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	430a      	orrs	r2, r1
 800042a:	601a      	str	r2, [r3, #0]
}
 800042c:	e017      	b.n	800045e <EXTI_Init+0x1ee>
    tmp += EXTI_InitStruct->EXTI_Mode + (((EXTI_InitStruct->EXTI_Line) >> 5 ) * 0x20);
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	791b      	ldrb	r3, [r3, #4]
 8000432:	461a      	mov	r2, r3
 8000434:	687b      	ldr	r3, [r7, #4]
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	095b      	lsrs	r3, r3, #5
 800043a:	015b      	lsls	r3, r3, #5
 800043c:	4413      	add	r3, r2
 800043e:	68fa      	ldr	r2, [r7, #12]
 8000440:	4413      	add	r3, r2
 8000442:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	6819      	ldr	r1, [r3, #0]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	f003 031f 	and.w	r3, r3, #31
 8000450:	2201      	movs	r2, #1
 8000452:	fa02 f303 	lsl.w	r3, r2, r3
 8000456:	43da      	mvns	r2, r3
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	400a      	ands	r2, r1
 800045c:	601a      	str	r2, [r3, #0]
}
 800045e:	bf00      	nop
 8000460:	3714      	adds	r7, #20
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40010400 	.word	0x40010400
 8000470:	40010404 	.word	0x40010404
 8000474:	40010408 	.word	0x40010408
 8000478:	4001040c 	.word	0x4001040c

0800047c <EXTI_GetITStatus>:
  * @param  EXTI_Line: specifies the EXTI line to check.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000484:	2300      	movs	r3, #0
 8000486:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000488:	2300      	movs	r3, #0
 800048a:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  *(__IO uint32_t *) (((uint32_t) &(EXTI->IMR)) + ((EXTI_Line) >> 5 ) * 0x20) & (uint32_t)(1 << (EXTI_Line & 0x1F));
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	095b      	lsrs	r3, r3, #5
 8000490:	f103 7300 	add.w	r3, r3, #33554432	; 0x2000000
 8000494:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 8000498:	015b      	lsls	r3, r3, #5
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	f002 021f 	and.w	r2, r2, #31
 80004a2:	2101      	movs	r1, #1
 80004a4:	fa01 f202 	lsl.w	r2, r1, r2
 80004a8:	4013      	ands	r3, r2
 80004aa:	60bb      	str	r3, [r7, #8]
 
  if ( (((*(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + (((EXTI_Line) >> 5 ) * 0x20) )) & (uint32_t)(1 << (EXTI_Line & 0x1F))) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	095b      	lsrs	r3, r3, #5
 80004b0:	015a      	lsls	r2, r3, #5
 80004b2:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <EXTI_GetITStatus+0x6c>)
 80004b4:	4413      	add	r3, r2
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	687a      	ldr	r2, [r7, #4]
 80004ba:	f002 021f 	and.w	r2, r2, #31
 80004be:	2101      	movs	r1, #1
 80004c0:	fa01 f202 	lsl.w	r2, r1, r2
 80004c4:	4013      	ands	r3, r2
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d005      	beq.n	80004d6 <EXTI_GetITStatus+0x5a>
 80004ca:	68bb      	ldr	r3, [r7, #8]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d002      	beq.n	80004d6 <EXTI_GetITStatus+0x5a>
  {
    bitstatus = SET;
 80004d0:	2301      	movs	r3, #1
 80004d2:	73fb      	strb	r3, [r7, #15]
 80004d4:	e001      	b.n	80004da <EXTI_GetITStatus+0x5e>
  }
  else
  {
    bitstatus = RESET;
 80004d6:	2300      	movs	r3, #0
 80004d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80004da:	7bfb      	ldrb	r3, [r7, #15]
  
}
 80004dc:	4618      	mov	r0, r3
 80004de:	3714      	adds	r7, #20
 80004e0:	46bd      	mov	sp, r7
 80004e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e6:	4770      	bx	lr
 80004e8:	40010414 	.word	0x40010414

080004ec <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..20).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE_EXT(EXTI_Line));
  
  *(__IO uint32_t *) (((uint32_t) &(EXTI->PR)) + ((EXTI_Line) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	f003 031f 	and.w	r3, r3, #31
 80004fa:	2201      	movs	r2, #1
 80004fc:	fa02 f103 	lsl.w	r1, r2, r3
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	095b      	lsrs	r3, r3, #5
 8000504:	015a      	lsls	r2, r3, #5
 8000506:	4b05      	ldr	r3, [pc, #20]	; (800051c <EXTI_ClearITPendingBit+0x30>)
 8000508:	4413      	add	r3, r2
 800050a:	460a      	mov	r2, r1
 800050c:	601a      	str	r2, [r3, #0]
}
 800050e:	bf00      	nop
 8000510:	370c      	adds	r7, #12
 8000512:	46bd      	mov	sp, r7
 8000514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop
 800051c:	40010414 	.word	0x40010414

08000520 <GPIO_Init>:
  *         GPIO_Pin_0->GPIO_Pin_2, GPIO_Pin_4, GPIO_Pin_6, GPIO_Pin_9 
  *                       and GPIO_Pin_10 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{ 
 8000520:	b480      	push	{r7}
 8000522:	b087      	sub	sp, #28
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 800052a:	2300      	movs	r3, #0
 800052c:	617b      	str	r3, [r7, #20]
 800052e:	2300      	movs	r3, #0
 8000530:	613b      	str	r3, [r7, #16]
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
 800053a:	e07c      	b.n	8000636 <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800053c:	2201      	movs	r2, #1
 800053e:	697b      	ldr	r3, [r7, #20]
 8000540:	fa02 f303 	lsl.w	r3, r2, r3
 8000544:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	693a      	ldr	r2, [r7, #16]
 800054c:	4013      	ands	r3, r2
 800054e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000550:	68fa      	ldr	r2, [r7, #12]
 8000552:	693b      	ldr	r3, [r7, #16]
 8000554:	429a      	cmp	r2, r3
 8000556:	d16b      	bne.n	8000630 <GPIO_Init+0x110>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	791b      	ldrb	r3, [r3, #4]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d003      	beq.n	8000568 <GPIO_Init+0x48>
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	2b02      	cmp	r3, #2
 8000566:	d134      	bne.n	80005d2 <GPIO_Init+0xb2>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	689a      	ldr	r2, [r3, #8]
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	005b      	lsls	r3, r3, #1
 8000570:	2103      	movs	r1, #3
 8000572:	fa01 f303 	lsl.w	r3, r1, r3
 8000576:	43db      	mvns	r3, r3
 8000578:	401a      	ands	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	689a      	ldr	r2, [r3, #8]
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	795b      	ldrb	r3, [r3, #5]
 8000586:	4619      	mov	r1, r3
 8000588:	697b      	ldr	r3, [r7, #20]
 800058a:	005b      	lsls	r3, r3, #1
 800058c:	fa01 f303 	lsl.w	r3, r1, r3
 8000590:	431a      	orrs	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	889b      	ldrh	r3, [r3, #4]
 800059a:	b29a      	uxth	r2, r3
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	b29b      	uxth	r3, r3
 80005a0:	4619      	mov	r1, r3
 80005a2:	2301      	movs	r3, #1
 80005a4:	408b      	lsls	r3, r1
 80005a6:	b29b      	uxth	r3, r3
 80005a8:	43db      	mvns	r3, r3
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	4013      	ands	r3, r2
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	889b      	ldrh	r3, [r3, #4]
 80005b8:	b29a      	uxth	r2, r3
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	799b      	ldrb	r3, [r3, #6]
 80005be:	4619      	mov	r1, r3
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	b29b      	uxth	r3, r3
 80005c4:	fa01 f303 	lsl.w	r3, r1, r3
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	4313      	orrs	r3, r2
 80005cc:	b29a      	uxth	r2, r3
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	809a      	strh	r2, [r3, #4]
      }
      
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	005b      	lsls	r3, r3, #1
 80005da:	2103      	movs	r1, #3
 80005dc:	fa01 f303 	lsl.w	r3, r1, r3
 80005e0:	43db      	mvns	r3, r3
 80005e2:	401a      	ands	r2, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681a      	ldr	r2, [r3, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	791b      	ldrb	r3, [r3, #4]
 80005f0:	4619      	mov	r1, r3
 80005f2:	697b      	ldr	r3, [r7, #20]
 80005f4:	005b      	lsls	r3, r3, #1
 80005f6:	fa01 f303 	lsl.w	r3, r1, r3
 80005fa:	431a      	orrs	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	601a      	str	r2, [r3, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	68da      	ldr	r2, [r3, #12]
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	b29b      	uxth	r3, r3
 8000608:	005b      	lsls	r3, r3, #1
 800060a:	2103      	movs	r1, #3
 800060c:	fa01 f303 	lsl.w	r3, r1, r3
 8000610:	43db      	mvns	r3, r3
 8000612:	401a      	ands	r2, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	68da      	ldr	r2, [r3, #12]
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	79db      	ldrb	r3, [r3, #7]
 8000620:	4619      	mov	r1, r3
 8000622:	697b      	ldr	r3, [r7, #20]
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	fa01 f303 	lsl.w	r3, r1, r3
 800062a:	431a      	orrs	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000630:	697b      	ldr	r3, [r7, #20]
 8000632:	3301      	adds	r3, #1
 8000634:	617b      	str	r3, [r7, #20]
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	2b0f      	cmp	r3, #15
 800063a:	f67f af7f 	bls.w	800053c <GPIO_Init+0x1c>
    }
  }
}
 800063e:	bf00      	nop
 8000640:	bf00      	nop
 8000642:	371c      	adds	r7, #28
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <GPIO_ReadInputDataBit>:
  *         (0..15) for GPIOA, GPIOB, GPIOC, GPIOD or GPIOE;
  *         (0..2, 4, 6, 9..10) for GPIOF.
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800064c:	b480      	push	{r7}
 800064e:	b085      	sub	sp, #20
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
 8000654:	460b      	mov	r3, r1
 8000656:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	8a1b      	ldrh	r3, [r3, #16]
 8000660:	b29a      	uxth	r2, r3
 8000662:	887b      	ldrh	r3, [r7, #2]
 8000664:	4013      	ands	r3, r2
 8000666:	b29b      	uxth	r3, r3
 8000668:	2b00      	cmp	r3, #0
 800066a:	d002      	beq.n	8000672 <GPIO_ReadInputDataBit+0x26>
  {
    bitstatus = (uint8_t)Bit_SET;
 800066c:	2301      	movs	r3, #1
 800066e:	73fb      	strb	r3, [r7, #15]
 8000670:	e001      	b.n	8000676 <GPIO_ReadInputDataBit+0x2a>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000672:	2300      	movs	r3, #0
 8000674:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000676:	7bfb      	ldrb	r3, [r7, #15]
}
 8000678:	4618      	mov	r0, r3
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000682:	4770      	bx	lr

08000684 <GPIO_WriteBit>:
  *     @arg Bit_RESET: to clear the port pin
  *     @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	460b      	mov	r3, r1
 800068e:	807b      	strh	r3, [r7, #2]
 8000690:	4613      	mov	r3, r2
 8000692:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));
  
  if (BitVal != Bit_RESET)
 8000694:	787b      	ldrb	r3, [r7, #1]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d003      	beq.n	80006a2 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800069a:	887a      	ldrh	r2, [r7, #2]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80006a0:	e002      	b.n	80006a8 <GPIO_WriteBit+0x24>
    GPIOx->BRR = GPIO_Pin ;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	887a      	ldrh	r2, [r7, #2]
 80006a6:	851a      	strh	r2, [r3, #40]	; 0x28
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr

080006b4 <NVIC_PriorityGroupConfig>:
  *     @note When NVIC_PriorityGroup_0 is selected, it will no be any nested 
  *           interrupt. This interrupts priority is managed only with subpriority.                                    
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80006bc:	4a06      	ldr	r2, [pc, #24]	; (80006d8 <NVIC_PriorityGroupConfig+0x24>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c8:	60d3      	str	r3, [r2, #12]
}
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80006dc:	b480      	push	{r7}
 80006de:	b087      	sub	sp, #28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80006e4:	2300      	movs	r3, #0
 80006e6:	617b      	str	r3, [r7, #20]
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	230f      	movs	r3, #15
 80006ee:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	78db      	ldrb	r3, [r3, #3]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d03a      	beq.n	800076e <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80006f8:	4b28      	ldr	r3, [pc, #160]	; (800079c <NVIC_Init+0xc0>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	43db      	mvns	r3, r3
 80006fe:	0a1b      	lsrs	r3, r3, #8
 8000700:	f003 0307 	and.w	r3, r3, #7
 8000704:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	f1c3 0304 	rsb	r3, r3, #4
 800070c:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 800070e:	68fa      	ldr	r2, [r7, #12]
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	fa22 f303 	lsr.w	r3, r2, r3
 8000716:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	785b      	ldrb	r3, [r3, #1]
 800071c:	461a      	mov	r2, r3
 800071e:	693b      	ldr	r3, [r7, #16]
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	789b      	ldrb	r3, [r3, #2]
 800072a:	461a      	mov	r2, r3
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	4013      	ands	r3, r2
 8000730:	697a      	ldr	r2, [r7, #20]
 8000732:	4313      	orrs	r3, r2
 8000734:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	011b      	lsls	r3, r3, #4
 800073a:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800073c:	4a18      	ldr	r2, [pc, #96]	; (80007a0 <NVIC_Init+0xc4>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	6979      	ldr	r1, [r7, #20]
 8000744:	b2c9      	uxtb	r1, r1
 8000746:	4413      	add	r3, r2
 8000748:	460a      	mov	r2, r1
 800074a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	f003 031f 	and.w	r3, r3, #31
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000756:	4912      	ldr	r1, [pc, #72]	; (80007a0 <NVIC_Init+0xc4>)
 8000758:	687a      	ldr	r2, [r7, #4]
 800075a:	7812      	ldrb	r2, [r2, #0]
 800075c:	0952      	lsrs	r2, r2, #5
 800075e:	b2d2      	uxtb	r2, r2
 8000760:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000762:	2201      	movs	r2, #1
 8000764:	fa02 f303 	lsl.w	r3, r2, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000768:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800076c:	e00f      	b.n	800078e <NVIC_Init+0xb2>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	f003 031f 	and.w	r3, r3, #31
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000776:	490a      	ldr	r1, [pc, #40]	; (80007a0 <NVIC_Init+0xc4>)
 8000778:	687a      	ldr	r2, [r7, #4]
 800077a:	7812      	ldrb	r2, [r2, #0]
 800077c:	0952      	lsrs	r2, r2, #5
 800077e:	b2d2      	uxtb	r2, r2
 8000780:	4610      	mov	r0, r2
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000782:	2201      	movs	r2, #1
 8000784:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000786:	f100 0320 	add.w	r3, r0, #32
 800078a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800078e:	bf00      	nop
 8000790:	371c      	adds	r7, #28
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00
 80007a0:	e000e100 	.word	0xe000e100

080007a4 <RCC_GetClocksFreq>:
  *           configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b08b      	sub	sp, #44	; 0x2c
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0, pllclk = 0;
 80007ac:	2300      	movs	r3, #0
 80007ae:	623b      	str	r3, [r7, #32]
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
 80007b4:	2300      	movs	r3, #0
 80007b6:	61bb      	str	r3, [r7, #24]
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]
 80007bc:	2300      	movs	r3, #0
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	2300      	movs	r3, #0
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t apb2presc = 0, ahbpresc = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	2300      	movs	r3, #0
 80007ca:	60bb      	str	r3, [r7, #8]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80007cc:	4b8b      	ldr	r3, [pc, #556]	; (80009fc <RCC_GetClocksFreq+0x258>)
 80007ce:	685b      	ldr	r3, [r3, #4]
 80007d0:	f003 030c 	and.w	r3, r3, #12
 80007d4:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80007d6:	6a3b      	ldr	r3, [r7, #32]
 80007d8:	2b08      	cmp	r3, #8
 80007da:	d011      	beq.n	8000800 <RCC_GetClocksFreq+0x5c>
 80007dc:	6a3b      	ldr	r3, [r7, #32]
 80007de:	2b08      	cmp	r3, #8
 80007e0:	d837      	bhi.n	8000852 <RCC_GetClocksFreq+0xae>
 80007e2:	6a3b      	ldr	r3, [r7, #32]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d003      	beq.n	80007f0 <RCC_GetClocksFreq+0x4c>
 80007e8:	6a3b      	ldr	r3, [r7, #32]
 80007ea:	2b04      	cmp	r3, #4
 80007ec:	d004      	beq.n	80007f8 <RCC_GetClocksFreq+0x54>
 80007ee:	e030      	b.n	8000852 <RCC_GetClocksFreq+0xae>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a83      	ldr	r2, [pc, #524]	; (8000a00 <RCC_GetClocksFreq+0x25c>)
 80007f4:	601a      	str	r2, [r3, #0]
      break;
 80007f6:	e030      	b.n	800085a <RCC_GetClocksFreq+0xb6>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4a81      	ldr	r2, [pc, #516]	; (8000a00 <RCC_GetClocksFreq+0x25c>)
 80007fc:	601a      	str	r2, [r3, #0]
      break;
 80007fe:	e02c      	b.n	800085a <RCC_GetClocksFreq+0xb6>
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000800:	4b7e      	ldr	r3, [pc, #504]	; (80009fc <RCC_GetClocksFreq+0x258>)
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000808:	61fb      	str	r3, [r7, #28]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 800080a:	4b7c      	ldr	r3, [pc, #496]	; (80009fc <RCC_GetClocksFreq+0x258>)
 800080c:	685b      	ldr	r3, [r3, #4]
 800080e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000812:	61bb      	str	r3, [r7, #24]
      pllmull = ( pllmull >> 18) + 2;
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	0c9b      	lsrs	r3, r3, #18
 8000818:	3302      	adds	r3, #2
 800081a:	61fb      	str	r3, [r7, #28]
      
      if (pllsource == 0x00)
 800081c:	69bb      	ldr	r3, [r7, #24]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d105      	bne.n	800082e <RCC_GetClocksFreq+0x8a>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        pllclk = (HSI_VALUE >> 1) * pllmull;
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	4a77      	ldr	r2, [pc, #476]	; (8000a04 <RCC_GetClocksFreq+0x260>)
 8000826:	fb02 f303 	mul.w	r3, r2, r3
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
 800082c:	e00d      	b.n	800084a <RCC_GetClocksFreq+0xa6>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 800082e:	4b73      	ldr	r3, [pc, #460]	; (80009fc <RCC_GetClocksFreq+0x258>)
 8000830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000832:	f003 030f 	and.w	r3, r3, #15
 8000836:	3301      	adds	r3, #1
 8000838:	617b      	str	r3, [r7, #20]
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        pllclk = (HSE_VALUE / prediv1factor) * pllmull; 
 800083a:	4a71      	ldr	r2, [pc, #452]	; (8000a00 <RCC_GetClocksFreq+0x25c>)
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	fb02 f303 	mul.w	r3, r2, r3
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
      }
      RCC_Clocks->SYSCLK_Frequency = pllclk;      
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800084e:	601a      	str	r2, [r3, #0]
      break;
 8000850:	e003      	b.n	800085a <RCC_GetClocksFreq+0xb6>
    default: /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4a6a      	ldr	r2, [pc, #424]	; (8000a00 <RCC_GetClocksFreq+0x25c>)
 8000856:	601a      	str	r2, [r3, #0]
      break;
 8000858:	bf00      	nop
  }
    /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800085a:	4b68      	ldr	r3, [pc, #416]	; (80009fc <RCC_GetClocksFreq+0x258>)
 800085c:	685b      	ldr	r3, [r3, #4]
 800085e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000862:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 8000864:	6a3b      	ldr	r3, [r7, #32]
 8000866:	091b      	lsrs	r3, r3, #4
 8000868:	623b      	str	r3, [r7, #32]
  ahbpresc = APBAHBPrescTable[tmp]; 
 800086a:	4a67      	ldr	r2, [pc, #412]	; (8000a08 <RCC_GetClocksFreq+0x264>)
 800086c:	6a3b      	ldr	r3, [r7, #32]
 800086e:	4413      	add	r3, r2
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	b2db      	uxtb	r3, r3
 8000874:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> ahbpresc;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	68bb      	ldr	r3, [r7, #8]
 800087c:	40da      	lsrs	r2, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000882:	4b5e      	ldr	r3, [pc, #376]	; (80009fc <RCC_GetClocksFreq+0x258>)
 8000884:	685b      	ldr	r3, [r3, #4]
 8000886:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800088a:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 8;
 800088c:	6a3b      	ldr	r3, [r7, #32]
 800088e:	0a1b      	lsrs	r3, r3, #8
 8000890:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000892:	4a5d      	ldr	r2, [pc, #372]	; (8000a08 <RCC_GetClocksFreq+0x264>)
 8000894:	6a3b      	ldr	r3, [r7, #32]
 8000896:	4413      	add	r3, r2
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	613b      	str	r3, [r7, #16]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	685a      	ldr	r2, [r3, #4]
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	40da      	lsrs	r2, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	609a      	str	r2, [r3, #8]
  
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 80008aa:	4b54      	ldr	r3, [pc, #336]	; (80009fc <RCC_GetClocksFreq+0x258>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80008b2:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 11;
 80008b4:	6a3b      	ldr	r3, [r7, #32]
 80008b6:	0adb      	lsrs	r3, r3, #11
 80008b8:	623b      	str	r3, [r7, #32]
  apb2presc = APBAHBPrescTable[tmp];
 80008ba:	4a53      	ldr	r2, [pc, #332]	; (8000a08 <RCC_GetClocksFreq+0x264>)
 80008bc:	6a3b      	ldr	r3, [r7, #32]
 80008be:	4413      	add	r3, r2
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	60fb      	str	r3, [r7, #12]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> apb2presc;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	685a      	ldr	r2, [r3, #4]
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	40da      	lsrs	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	60da      	str	r2, [r3, #12]
  
  /* Get ADC12CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE12;
 80008d2:	4b4a      	ldr	r3, [pc, #296]	; (80009fc <RCC_GetClocksFreq+0x258>)
 80008d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008d6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80008da:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80008dc:	6a3b      	ldr	r3, [r7, #32]
 80008de:	091b      	lsrs	r3, r3, #4
 80008e0:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 80008e2:	4a4a      	ldr	r2, [pc, #296]	; (8000a0c <RCC_GetClocksFreq+0x268>)
 80008e4:	6a3b      	ldr	r3, [r7, #32]
 80008e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008ea:	b29b      	uxth	r3, r3
 80008ec:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 80008ee:	693b      	ldr	r3, [r7, #16]
 80008f0:	f003 0310 	and.w	r3, r3, #16
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d006      	beq.n	8000906 <RCC_GetClocksFreq+0x162>
  {
     /* ADC12CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC12CLK_Frequency = pllclk / presc;
 80008f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008fa:	693b      	ldr	r3, [r7, #16]
 80008fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	611a      	str	r2, [r3, #16]
 8000904:	e003      	b.n	800090e <RCC_GetClocksFreq+0x16a>
  }
  else
  {
   /* ADC12CLK clock frequency is AHB clock */
     RCC_Clocks->ADC12CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	611a      	str	r2, [r3, #16]
  }
  
  /* Get ADC34CLK prescaler */
  tmp = RCC->CFGR2 & RCC_CFGR2_ADCPRE34;
 800090e:	4b3b      	ldr	r3, [pc, #236]	; (80009fc <RCC_GetClocksFreq+0x258>)
 8000910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000912:	f403 5378 	and.w	r3, r3, #15872	; 0x3e00
 8000916:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 9;
 8000918:	6a3b      	ldr	r3, [r7, #32]
 800091a:	0a5b      	lsrs	r3, r3, #9
 800091c:	623b      	str	r3, [r7, #32]
  presc = ADCPrescTable[tmp];
 800091e:	4a3b      	ldr	r2, [pc, #236]	; (8000a0c <RCC_GetClocksFreq+0x268>)
 8000920:	6a3b      	ldr	r3, [r7, #32]
 8000922:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000926:	b29b      	uxth	r3, r3
 8000928:	613b      	str	r3, [r7, #16]
  if ((presc & 0x10) != 0)
 800092a:	693b      	ldr	r3, [r7, #16]
 800092c:	f003 0310 	and.w	r3, r3, #16
 8000930:	2b00      	cmp	r3, #0
 8000932:	d006      	beq.n	8000942 <RCC_GetClocksFreq+0x19e>
  {
     /* ADC34CLK clock frequency is derived from PLL clock */
     RCC_Clocks->ADC34CLK_Frequency = pllclk / presc;
 8000934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	fbb2 f2f3 	udiv	r2, r2, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	615a      	str	r2, [r3, #20]
 8000940:	e003      	b.n	800094a <RCC_GetClocksFreq+0x1a6>
  }
  else
  {
   /* ADC34CLK clock frequency is AHB clock */
     RCC_Clocks->ADC34CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	615a      	str	r2, [r3, #20]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 800094a:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <RCC_GetClocksFreq+0x258>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0310 	and.w	r3, r3, #16
 8000952:	2b10      	cmp	r3, #16
 8000954:	d003      	beq.n	800095e <RCC_GetClocksFreq+0x1ba>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	4a29      	ldr	r2, [pc, #164]	; (8000a00 <RCC_GetClocksFreq+0x25c>)
 800095a:	619a      	str	r2, [r3, #24]
 800095c:	e003      	b.n	8000966 <RCC_GetClocksFreq+0x1c2>
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	619a      	str	r2, [r3, #24]
  }

  /* I2C2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C2SW) != RCC_CFGR3_I2C2SW)
 8000966:	4b25      	ldr	r3, [pc, #148]	; (80009fc <RCC_GetClocksFreq+0x258>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0320 	and.w	r3, r3, #32
 800096e:	2b20      	cmp	r3, #32
 8000970:	d003      	beq.n	800097a <RCC_GetClocksFreq+0x1d6>
  {
    /* I2C2 Clock is HSI Osc. */
    RCC_Clocks->I2C2CLK_Frequency = HSI_VALUE;
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a22      	ldr	r2, [pc, #136]	; (8000a00 <RCC_GetClocksFreq+0x25c>)
 8000976:	61da      	str	r2, [r3, #28]
 8000978:	e003      	b.n	8000982 <RCC_GetClocksFreq+0x1de>
  }
  else
  {
    /* I2C2 Clock is System Clock */
    RCC_Clocks->I2C2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	61da      	str	r2, [r3, #28]
  }
  
    /* TIM1CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM1SW) == RCC_CFGR3_TIM1SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 8000982:	4b1e      	ldr	r3, [pc, #120]	; (80009fc <RCC_GetClocksFreq+0x258>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800098a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800098e:	d10d      	bne.n	80009ac <RCC_GetClocksFreq+0x208>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000996:	429a      	cmp	r2, r3
 8000998:	d108      	bne.n	80009ac <RCC_GetClocksFreq+0x208>
  && (apb2presc == ahbpresc)) 
 800099a:	68fa      	ldr	r2, [r7, #12]
 800099c:	68bb      	ldr	r3, [r7, #8]
 800099e:	429a      	cmp	r2, r3
 80009a0:	d104      	bne.n	80009ac <RCC_GetClocksFreq+0x208>
  {
    /* TIM1 Clock is 2 * pllclk */
    RCC_Clocks->TIM1CLK_Frequency = pllclk * 2;
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	005a      	lsls	r2, r3, #1
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	621a      	str	r2, [r3, #32]
 80009aa:	e003      	b.n	80009b4 <RCC_GetClocksFreq+0x210>
  }
  else
  {
    /* TIM1 Clock is APB2 clock. */
    RCC_Clocks->TIM1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	68da      	ldr	r2, [r3, #12]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	621a      	str	r2, [r3, #32]
  }

    /* TIM8CLK clock frequency */
  if(((RCC->CFGR3 & RCC_CFGR3_TIM8SW) == RCC_CFGR3_TIM8SW)&& (RCC_Clocks->SYSCLK_Frequency == pllclk) \
 80009b4:	4b11      	ldr	r3, [pc, #68]	; (80009fc <RCC_GetClocksFreq+0x258>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80009bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009c0:	d10d      	bne.n	80009de <RCC_GetClocksFreq+0x23a>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d108      	bne.n	80009de <RCC_GetClocksFreq+0x23a>
  && (apb2presc == ahbpresc))
 80009cc:	68fa      	ldr	r2, [r7, #12]
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	429a      	cmp	r2, r3
 80009d2:	d104      	bne.n	80009de <RCC_GetClocksFreq+0x23a>
  {
    /* TIM8 Clock is 2 * pllclk */
    RCC_Clocks->TIM8CLK_Frequency = pllclk * 2;
 80009d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009d6:	005a      	lsls	r2, r3, #1
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	625a      	str	r2, [r3, #36]	; 0x24
 80009dc:	e003      	b.n	80009e6 <RCC_GetClocksFreq+0x242>
  }
  else
  {
    /* TIM8 Clock is APB2 clock. */
    RCC_Clocks->TIM8CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	68da      	ldr	r2, [r3, #12]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	625a      	str	r2, [r3, #36]	; 0x24
  }
  
  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <RCC_GetClocksFreq+0x258>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0303 	and.w	r3, r3, #3
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d10e      	bne.n	8000a10 <RCC_GetClocksFreq+0x26c>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK2_Frequency;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	68da      	ldr	r2, [r3, #12]
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
 80009fa:	e028      	b.n	8000a4e <RCC_GetClocksFreq+0x2aa>
 80009fc:	40021000 	.word	0x40021000
 8000a00:	007a1200 	.word	0x007a1200
 8000a04:	003d0900 	.word	0x003d0900
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000010 	.word	0x20000010
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000a10:	4b6c      	ldr	r3, [pc, #432]	; (8000bc4 <RCC_GetClocksFreq+0x420>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a14:	f003 0303 	and.w	r3, r3, #3
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d104      	bne.n	8000a26 <RCC_GetClocksFreq+0x282>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	629a      	str	r2, [r3, #40]	; 0x28
 8000a24:	e013      	b.n	8000a4e <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 8000a26:	4b67      	ldr	r3, [pc, #412]	; (8000bc4 <RCC_GetClocksFreq+0x420>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0303 	and.w	r3, r3, #3
 8000a2e:	2b02      	cmp	r3, #2
 8000a30:	d104      	bne.n	8000a3c <RCC_GetClocksFreq+0x298>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a38:	629a      	str	r2, [r3, #40]	; 0x28
 8000a3a:	e008      	b.n	8000a4e <RCC_GetClocksFreq+0x2aa>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000a3c:	4b61      	ldr	r3, [pc, #388]	; (8000bc4 <RCC_GetClocksFreq+0x420>)
 8000a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a40:	f003 0303 	and.w	r3, r3, #3
 8000a44:	2b03      	cmp	r3, #3
 8000a46:	d102      	bne.n	8000a4e <RCC_GetClocksFreq+0x2aa>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4a5f      	ldr	r2, [pc, #380]	; (8000bc8 <RCC_GetClocksFreq+0x424>)
 8000a4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* USART2CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == 0x0)
 8000a4e:	4b5d      	ldr	r3, [pc, #372]	; (8000bc4 <RCC_GetClocksFreq+0x420>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d104      	bne.n	8000a64 <RCC_GetClocksFreq+0x2c0>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	689a      	ldr	r2, [r3, #8]
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a62:	e021      	b.n	8000aa8 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_0)
 8000a64:	4b57      	ldr	r3, [pc, #348]	; (8000bc4 <RCC_GetClocksFreq+0x420>)
 8000a66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a70:	d104      	bne.n	8000a7c <RCC_GetClocksFreq+0x2d8>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART2CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a7a:	e015      	b.n	8000aa8 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW_1)
 8000a7c:	4b51      	ldr	r3, [pc, #324]	; (8000bc4 <RCC_GetClocksFreq+0x420>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000a88:	d104      	bne.n	8000a94 <RCC_GetClocksFreq+0x2f0>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART2CLK_Frequency = LSE_VALUE;
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a90:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a92:	e009      	b.n	8000aa8 <RCC_GetClocksFreq+0x304>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART2SW) == RCC_CFGR3_USART2SW)
 8000a94:	4b4b      	ldr	r3, [pc, #300]	; (8000bc4 <RCC_GetClocksFreq+0x420>)
 8000a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8000aa0:	d102      	bne.n	8000aa8 <RCC_GetClocksFreq+0x304>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART2CLK_Frequency = HSI_VALUE;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a48      	ldr	r2, [pc, #288]	; (8000bc8 <RCC_GetClocksFreq+0x424>)
 8000aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  }    

  /* USART3CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == 0x0)
 8000aa8:	4b46      	ldr	r3, [pc, #280]	; (8000bc4 <RCC_GetClocksFreq+0x420>)
 8000aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aac:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d104      	bne.n	8000abe <RCC_GetClocksFreq+0x31a>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689a      	ldr	r2, [r3, #8]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	631a      	str	r2, [r3, #48]	; 0x30
 8000abc:	e021      	b.n	8000b02 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_0)
 8000abe:	4b41      	ldr	r3, [pc, #260]	; (8000bc4 <RCC_GetClocksFreq+0x420>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000ac6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8000aca:	d104      	bne.n	8000ad6 <RCC_GetClocksFreq+0x332>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->USART3CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	631a      	str	r2, [r3, #48]	; 0x30
 8000ad4:	e015      	b.n	8000b02 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW_1)
 8000ad6:	4b3b      	ldr	r3, [pc, #236]	; (8000bc4 <RCC_GetClocksFreq+0x420>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ada:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000ade:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8000ae2:	d104      	bne.n	8000aee <RCC_GetClocksFreq+0x34a>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->USART3CLK_Frequency = LSE_VALUE;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000aea:	631a      	str	r2, [r3, #48]	; 0x30
 8000aec:	e009      	b.n	8000b02 <RCC_GetClocksFreq+0x35e>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART3SW) == RCC_CFGR3_USART3SW)
 8000aee:	4b35      	ldr	r3, [pc, #212]	; (8000bc4 <RCC_GetClocksFreq+0x420>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8000af6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8000afa:	d102      	bne.n	8000b02 <RCC_GetClocksFreq+0x35e>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->USART3CLK_Frequency = HSI_VALUE;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	4a32      	ldr	r2, [pc, #200]	; (8000bc8 <RCC_GetClocksFreq+0x424>)
 8000b00:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
    /* UART4CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == 0x0)
 8000b02:	4b30      	ldr	r3, [pc, #192]	; (8000bc4 <RCC_GetClocksFreq+0x420>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d104      	bne.n	8000b18 <RCC_GetClocksFreq+0x374>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	689a      	ldr	r2, [r3, #8]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	635a      	str	r2, [r3, #52]	; 0x34
 8000b16:	e021      	b.n	8000b5c <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_0)
 8000b18:	4b2a      	ldr	r3, [pc, #168]	; (8000bc4 <RCC_GetClocksFreq+0x420>)
 8000b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000b20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000b24:	d104      	bne.n	8000b30 <RCC_GetClocksFreq+0x38c>
  {
    /* USART Clock is System Clock */
    RCC_Clocks->UART4CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	635a      	str	r2, [r3, #52]	; 0x34
 8000b2e:	e015      	b.n	8000b5c <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW_1)
 8000b30:	4b24      	ldr	r3, [pc, #144]	; (8000bc4 <RCC_GetClocksFreq+0x420>)
 8000b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b34:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000b38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000b3c:	d104      	bne.n	8000b48 <RCC_GetClocksFreq+0x3a4>
  {
    /* USART Clock is LSE Osc. */
    RCC_Clocks->UART4CLK_Frequency = LSE_VALUE;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b44:	635a      	str	r2, [r3, #52]	; 0x34
 8000b46:	e009      	b.n	8000b5c <RCC_GetClocksFreq+0x3b8>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_UART4SW) == RCC_CFGR3_UART4SW)
 8000b48:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <RCC_GetClocksFreq+0x420>)
 8000b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8000b50:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8000b54:	d102      	bne.n	8000b5c <RCC_GetClocksFreq+0x3b8>
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART4CLK_Frequency = HSI_VALUE;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	4a1b      	ldr	r2, [pc, #108]	; (8000bc8 <RCC_GetClocksFreq+0x424>)
 8000b5a:	635a      	str	r2, [r3, #52]	; 0x34
  }   
  
  /* UART5CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == 0x0)
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <RCC_GetClocksFreq+0x420>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b60:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d104      	bne.n	8000b72 <RCC_GetClocksFreq+0x3ce>
  {
    /* USART Clock is PCLK */
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->PCLK1_Frequency;
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	689a      	ldr	r2, [r3, #8]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	639a      	str	r2, [r3, #56]	; 0x38
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
  {
    /* USART Clock is HSI Osc. */
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
  } 
}
 8000b70:	e021      	b.n	8000bb6 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_0)
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <RCC_GetClocksFreq+0x420>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000b7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000b7e:	d104      	bne.n	8000b8a <RCC_GetClocksFreq+0x3e6>
    RCC_Clocks->UART5CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b88:	e015      	b.n	8000bb6 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW_1)
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <RCC_GetClocksFreq+0x420>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000b92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000b96:	d104      	bne.n	8000ba2 <RCC_GetClocksFreq+0x3fe>
    RCC_Clocks->UART5CLK_Frequency = LSE_VALUE;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000b9e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000ba0:	e009      	b.n	8000bb6 <RCC_GetClocksFreq+0x412>
  else if((RCC->CFGR3 & RCC_CFGR3_UART5SW) == RCC_CFGR3_UART5SW)
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <RCC_GetClocksFreq+0x420>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8000baa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8000bae:	d102      	bne.n	8000bb6 <RCC_GetClocksFreq+0x412>
    RCC_Clocks->UART5CLK_Frequency = HSI_VALUE;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <RCC_GetClocksFreq+0x424>)
 8000bb4:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000bb6:	bf00      	nop
 8000bb8:	372c      	adds	r7, #44	; 0x2c
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	40021000 	.word	0x40021000
 8000bc8:	007a1200 	.word	0x007a1200

08000bcc <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000bd8:	78fb      	ldrb	r3, [r7, #3]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d006      	beq.n	8000bec <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <RCC_AHBPeriphClockCmd+0x3c>)
 8000be0:	695a      	ldr	r2, [r3, #20]
 8000be2:	4909      	ldr	r1, [pc, #36]	; (8000c08 <RCC_AHBPeriphClockCmd+0x3c>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4313      	orrs	r3, r2
 8000be8:	614b      	str	r3, [r1, #20]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000bea:	e006      	b.n	8000bfa <RCC_AHBPeriphClockCmd+0x2e>
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000bec:	4b06      	ldr	r3, [pc, #24]	; (8000c08 <RCC_AHBPeriphClockCmd+0x3c>)
 8000bee:	695a      	ldr	r2, [r3, #20]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	43db      	mvns	r3, r3
 8000bf4:	4904      	ldr	r1, [pc, #16]	; (8000c08 <RCC_AHBPeriphClockCmd+0x3c>)
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	614b      	str	r3, [r1, #20]
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40021000 	.word	0x40021000

08000c0c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	460b      	mov	r3, r1
 8000c16:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c18:	78fb      	ldrb	r3, [r7, #3]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d006      	beq.n	8000c2c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	; (8000c48 <RCC_APB2PeriphClockCmd+0x3c>)
 8000c20:	699a      	ldr	r2, [r3, #24]
 8000c22:	4909      	ldr	r1, [pc, #36]	; (8000c48 <RCC_APB2PeriphClockCmd+0x3c>)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000c2a:	e006      	b.n	8000c3a <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <RCC_APB2PeriphClockCmd+0x3c>)
 8000c2e:	699a      	ldr	r2, [r3, #24]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	43db      	mvns	r3, r3
 8000c34:	4904      	ldr	r1, [pc, #16]	; (8000c48 <RCC_APB2PeriphClockCmd+0x3c>)
 8000c36:	4013      	ands	r3, r2
 8000c38:	618b      	str	r3, [r1, #24]
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40021000 	.word	0x40021000

08000c4c <SYSCFG_EXTILineConfig>:
  * @param  EXTI_PinSourcex: specifies the EXTI line to be configured.
  *         This parameter can be EXTI_PinSourcex where x can be (0..15)
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b085      	sub	sp, #20
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	460a      	mov	r2, r1
 8000c56:	71fb      	strb	r3, [r7, #7]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000c60:	79bb      	ldrb	r3, [r7, #6]
 8000c62:	f003 0303 	and.w	r3, r3, #3
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	220f      	movs	r2, #15
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000c70:	4a16      	ldr	r2, [pc, #88]	; (8000ccc <SYSCFG_EXTILineConfig+0x80>)
 8000c72:	79bb      	ldrb	r3, [r7, #6]
 8000c74:	089b      	lsrs	r3, r3, #2
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	3302      	adds	r3, #2
 8000c7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	43db      	mvns	r3, r3
 8000c82:	4812      	ldr	r0, [pc, #72]	; (8000ccc <SYSCFG_EXTILineConfig+0x80>)
 8000c84:	79b9      	ldrb	r1, [r7, #6]
 8000c86:	0889      	lsrs	r1, r1, #2
 8000c88:	b2c9      	uxtb	r1, r1
 8000c8a:	401a      	ands	r2, r3
 8000c8c:	1c8b      	adds	r3, r1, #2
 8000c8e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000c92:	4a0e      	ldr	r2, [pc, #56]	; (8000ccc <SYSCFG_EXTILineConfig+0x80>)
 8000c94:	79bb      	ldrb	r3, [r7, #6]
 8000c96:	089b      	lsrs	r3, r3, #2
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	3302      	adds	r3, #2
 8000c9c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ca0:	79f9      	ldrb	r1, [r7, #7]
 8000ca2:	79bb      	ldrb	r3, [r7, #6]
 8000ca4:	f003 0303 	and.w	r3, r3, #3
 8000ca8:	009b      	lsls	r3, r3, #2
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	4807      	ldr	r0, [pc, #28]	; (8000ccc <SYSCFG_EXTILineConfig+0x80>)
 8000cb0:	79b9      	ldrb	r1, [r7, #6]
 8000cb2:	0889      	lsrs	r1, r1, #2
 8000cb4:	b2c9      	uxtb	r1, r1
 8000cb6:	431a      	orrs	r2, r3
 8000cb8:	1c8b      	adds	r3, r1, #2
 8000cba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000cbe:	bf00      	nop
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40010000 	.word	0x40010000

08000cd0 <USART_SendData>:
  *         following values: USART1 or USART2 or USART3 or UART4 or UART5.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	460b      	mov	r3, r1
 8000cda:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 

  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8000cdc:	887b      	ldrh	r3, [r7, #2]
 8000cde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ce2:	b29a      	uxth	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000ce8:	bf00      	nop
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b089      	sub	sp, #36	; 0x24
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	60f8      	str	r0, [r7, #12]
 8000cfc:	60b9      	str	r1, [r7, #8]
 8000cfe:	4613      	mov	r3, r2
 8000d00:	71fb      	strb	r3, [r7, #7]
  uint32_t usartreg = 0, itpos = 0, itmask = 0;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61bb      	str	r3, [r7, #24]
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
  uint32_t usartxbase = 0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CONFIG_IT(USART_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	61fb      	str	r3, [r7, #28]

  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	b29b      	uxth	r3, r3
 8000d1a:	0a1b      	lsrs	r3, r3, #8
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	61bb      	str	r3, [r7, #24]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	b2db      	uxtb	r3, r3
 8000d24:	617b      	str	r3, [r7, #20]
  itmask = (((uint32_t)0x01) << itpos);
 8000d26:	2201      	movs	r2, #1
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	613b      	str	r3, [r7, #16]

  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000d30:	69bb      	ldr	r3, [r7, #24]
 8000d32:	2b02      	cmp	r3, #2
 8000d34:	d103      	bne.n	8000d3e <USART_ITConfig+0x4a>
  {
    usartxbase += 0x04;
 8000d36:	69fb      	ldr	r3, [r7, #28]
 8000d38:	3304      	adds	r3, #4
 8000d3a:	61fb      	str	r3, [r7, #28]
 8000d3c:	e005      	b.n	8000d4a <USART_ITConfig+0x56>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	2b03      	cmp	r3, #3
 8000d42:	d102      	bne.n	8000d4a <USART_ITConfig+0x56>
  {
    usartxbase += 0x08;
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	3308      	adds	r3, #8
 8000d48:	61fb      	str	r3, [r7, #28]
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d006      	beq.n	8000d5e <USART_ITConfig+0x6a>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	6819      	ldr	r1, [r3, #0]
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000d5c:	e006      	b.n	8000d6c <USART_ITConfig+0x78>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	6819      	ldr	r1, [r3, #0]
 8000d62:	693b      	ldr	r3, [r7, #16]
 8000d64:	43da      	mvns	r2, r3
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	400a      	ands	r2, r1
 8000d6a:	601a      	str	r2, [r3, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	3724      	adds	r7, #36	; 0x24
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr

08000d78 <USART_GetFlagStatus>:
  *         @arg USART_FLAG_FE:  Framing Error flag.
  *         @arg USART_FLAG_PE:  Parity Error flag.
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint32_t USART_FLAG)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b085      	sub	sp, #20
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69da      	ldr	r2, [r3, #28]
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d002      	beq.n	8000d98 <USART_GetFlagStatus+0x20>
  {
    bitstatus = SET;
 8000d92:	2301      	movs	r3, #1
 8000d94:	73fb      	strb	r3, [r7, #15]
 8000d96:	e001      	b.n	8000d9c <USART_GetFlagStatus+0x24>
  }
  else
  {
    bitstatus = RESET;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <USART_GetITStatus>:
  *         @arg USART_IT_FE:  Framing Error interrupt.
  *         @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b087      	sub	sp, #28
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	6039      	str	r1, [r7, #0]
  uint32_t bitpos = 0, itmask = 0, usartreg = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	74fb      	strb	r3, [r7, #19]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	0a1b      	lsrs	r3, r3, #8
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	b2db      	uxtb	r3, r3
 8000dd2:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8000dd4:	2201      	movs	r2, #1
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ddc:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d105      	bne.n	8000df0 <USART_GetITStatus+0x46>
  {
    itmask &= USARTx->CR1;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	697a      	ldr	r2, [r7, #20]
 8000dea:	4013      	ands	r3, r2
 8000dec:	617b      	str	r3, [r7, #20]
 8000dee:	e00d      	b.n	8000e0c <USART_GetITStatus+0x62>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d105      	bne.n	8000e02 <USART_GetITStatus+0x58>
  {
    itmask &= USARTx->CR2;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	697a      	ldr	r2, [r7, #20]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	e004      	b.n	8000e0c <USART_GetITStatus+0x62>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	4013      	ands	r3, r2
 8000e0a:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x10;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	0c1b      	lsrs	r3, r3, #16
 8000e10:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8000e12:	2201      	movs	r2, #1
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->ISR;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	69db      	ldr	r3, [r3, #28]
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	4013      	ands	r3, r2
 8000e24:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d005      	beq.n	8000e38 <USART_GetITStatus+0x8e>
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d002      	beq.n	8000e38 <USART_GetITStatus+0x8e>
  {
    bitstatus = SET;
 8000e32:	2301      	movs	r3, #1
 8000e34:	74fb      	strb	r3, [r7, #19]
 8000e36:	e001      	b.n	8000e3c <USART_GetITStatus+0x92>
  }
  else
  {
    bitstatus = RESET;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8000e3c:	7cfb      	ldrb	r3, [r7, #19]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	371c      	adds	r7, #28
 8000e42:	46bd      	mov	sp, r7
 8000e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e48:	4770      	bx	lr
	...

08000e4c <NVIC_EnableIRQ>:
    The interrupt number cannot be a negative value.

    \param [in]      IRQn  Number of the external interrupt to enable
 */
static __INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8000e56:	79fb      	ldrb	r3, [r7, #7]
 8000e58:	f003 031f 	and.w	r3, r3, #31
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	fa02 f103 	lsl.w	r1, r2, r3
 8000e62:	4a06      	ldr	r2, [pc, #24]	; (8000e7c <NVIC_EnableIRQ+0x30>)
 8000e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e68:	095b      	lsrs	r3, r3, #5
 8000e6a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	e000e100 	.word	0xe000e100

08000e80 <uart_put_char>:
        UART_COUNT--;
    }
    return val;
}

void uart_put_char(uint8_t c) {
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	4603      	mov	r3, r0
 8000e88:	71fb      	strb	r3, [r7, #7]
    USART_SendData(USART2, (uint8_t)c);
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	b29b      	uxth	r3, r3
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4807      	ldr	r0, [pc, #28]	; (8000eb0 <uart_put_char+0x30>)
 8000e92:	f7ff ff1d 	bl	8000cd0 <USART_SendData>
    while(USART_GetFlagStatus(USART2, USART_FLAG_TXE)  == RESET){}
 8000e96:	bf00      	nop
 8000e98:	2180      	movs	r1, #128	; 0x80
 8000e9a:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <uart_put_char+0x30>)
 8000e9c:	f7ff ff6c 	bl	8000d78 <USART_GetFlagStatus>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d0f8      	beq.n	8000e98 <uart_put_char+0x18>
}
 8000ea6:	bf00      	nop
 8000ea8:	bf00      	nop
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40004400 	.word	0x40004400

08000eb4 <_write_r>:

int _write_r(struct _reent *r, int file, char *ptr, int len) {
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	60f8      	str	r0, [r7, #12]
 8000ebc:	60b9      	str	r1, [r7, #8]
 8000ebe:	607a      	str	r2, [r7, #4]
 8000ec0:	603b      	str	r3, [r7, #0]
    int n;

    for (n = 0; n < len; n++) {
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
 8000ec6:	e012      	b.n	8000eee <_write_r+0x3a>
        if (ptr[n] == '\n') {
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	687a      	ldr	r2, [r7, #4]
 8000ecc:	4413      	add	r3, r2
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b0a      	cmp	r3, #10
 8000ed2:	d102      	bne.n	8000eda <_write_r+0x26>
            uart_put_char('\r');
 8000ed4:	200d      	movs	r0, #13
 8000ed6:	f7ff ffd3 	bl	8000e80 <uart_put_char>
        }
        uart_put_char(ptr[n] & (uint16_t)0x01FF);
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	4413      	add	r3, r2
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ffcc 	bl	8000e80 <uart_put_char>
    for (n = 0; n < len; n++) {
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	3301      	adds	r3, #1
 8000eec:	617b      	str	r3, [r7, #20]
 8000eee:	697a      	ldr	r2, [r7, #20]
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	dbe8      	blt.n	8000ec8 <_write_r+0x14>
    }

    return len;
 8000ef6:	683b      	ldr	r3, [r7, #0]
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	3718      	adds	r7, #24
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <USART2_IRQHandler>:

void USART2_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8000f04:	4915      	ldr	r1, [pc, #84]	; (8000f5c <USART2_IRQHandler+0x5c>)
 8000f06:	4816      	ldr	r0, [pc, #88]	; (8000f60 <USART2_IRQHandler+0x60>)
 8000f08:	f7ff ff4f 	bl	8000daa <USART_GetITStatus>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d021      	beq.n	8000f56 <USART2_IRQHandler+0x56>
    {
        UART_BUFFER[UART_END_IDX++] = (uint8_t)(USART2->RDR & 0xFF);
 8000f12:	4b13      	ldr	r3, [pc, #76]	; (8000f60 <USART2_IRQHandler+0x60>)
 8000f14:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8000f16:	b299      	uxth	r1, r3
 8000f18:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <USART2_IRQHandler+0x64>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	1c5a      	adds	r2, r3, #1
 8000f20:	b2d0      	uxtb	r0, r2
 8000f22:	4a10      	ldr	r2, [pc, #64]	; (8000f64 <USART2_IRQHandler+0x64>)
 8000f24:	7010      	strb	r0, [r2, #0]
 8000f26:	461a      	mov	r2, r3
 8000f28:	b2c9      	uxtb	r1, r1
 8000f2a:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <USART2_IRQHandler+0x68>)
 8000f2c:	5499      	strb	r1, [r3, r2]
        if (UART_COUNT == UART_BUFFER_LENGTH-1){
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <USART2_IRQHandler+0x6c>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b2db      	uxtb	r3, r3
 8000f34:	2bff      	cmp	r3, #255	; 0xff
 8000f36:	d107      	bne.n	8000f48 <USART2_IRQHandler+0x48>
            UART_START_IDX++;
 8000f38:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <USART2_IRQHandler+0x70>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	3301      	adds	r3, #1
 8000f40:	b2da      	uxtb	r2, r3
 8000f42:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <USART2_IRQHandler+0x70>)
 8000f44:	701a      	strb	r2, [r3, #0]
        } else {
            UART_COUNT++;
        }
    }
}
 8000f46:	e006      	b.n	8000f56 <USART2_IRQHandler+0x56>
            UART_COUNT++;
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <USART2_IRQHandler+0x6c>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	3301      	adds	r3, #1
 8000f50:	b2da      	uxtb	r2, r3
 8000f52:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <USART2_IRQHandler+0x6c>)
 8000f54:	701a      	strb	r2, [r3, #0]
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	00050105 	.word	0x00050105
 8000f60:	40004400 	.word	0x40004400
 8000f64:	200001ac 	.word	0x200001ac
 8000f68:	200000ac 	.word	0x200000ac
 8000f6c:	200001ae 	.word	0x200001ae
 8000f70:	200001ad 	.word	0x200001ad

08000f74 <uart_init>:

uint8_t uart_get_count(){
    return UART_COUNT;
}

void uart_init(uint32_t baud) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b094      	sub	sp, #80	; 0x50
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
    setbuf(stdout, NULL); // Set stdout to disable line buffering
 8000f7c:	4b86      	ldr	r3, [pc, #536]	; (8001198 <uart_init+0x224>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	2100      	movs	r1, #0
 8000f84:	4618      	mov	r0, r3
 8000f86:	f000 fd2d 	bl	80019e4 <setbuf>
    setbuf(stdin,  NULL); // Set stdin  to disable line buffering
 8000f8a:	4b83      	ldr	r3, [pc, #524]	; (8001198 <uart_init+0x224>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2100      	movs	r1, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fd26 	bl	80019e4 <setbuf>

    // Enable Clocks
    RCC->AHBENR  |= RCC_AHBPeriph_GPIOA;    // Enable Clock for GPIO Bank A
 8000f98:	4b80      	ldr	r3, [pc, #512]	; (800119c <uart_init+0x228>)
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	4a7f      	ldr	r2, [pc, #508]	; (800119c <uart_init+0x228>)
 8000f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa2:	6153      	str	r3, [r2, #20]
    RCC->APB1ENR |= RCC_APB1Periph_USART2;  // Enable Clock for USART2
 8000fa4:	4b7d      	ldr	r3, [pc, #500]	; (800119c <uart_init+0x228>)
 8000fa6:	69db      	ldr	r3, [r3, #28]
 8000fa8:	4a7c      	ldr	r2, [pc, #496]	; (800119c <uart_init+0x228>)
 8000faa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fae:	61d3      	str	r3, [r2, #28]

    // Connect pins to USART2
    GPIOA->AFR[2 >> 0x03] &= ~(0x0000000F << ((2 & 0x00000007) * 4)); // Clear alternate function for PA2
 8000fb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fb4:	6a1b      	ldr	r3, [r3, #32]
 8000fb6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000fbe:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[2 >> 0x03] |=  (0x00000007 << ((2 & 0x00000007) * 4)); // Set alternate 7 function for PA2
 8000fc0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fc4:	6a1b      	ldr	r3, [r3, #32]
 8000fc6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fca:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000fce:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] &= ~(0x0000000F << ((3 & 0x00000007) * 4)); // Clear alternate function for PA3
 8000fd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fd4:	6a1b      	ldr	r3, [r3, #32]
 8000fd6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000fde:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[3 >> 0x03] |=  (0x00000007 << ((3 & 0x00000007) * 4)); // Set alternate 7 function for PA3
 8000fe0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000fe4:	6a1b      	ldr	r3, [r3, #32]
 8000fe6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000fea:	f443 43e0 	orr.w	r3, r3, #28672	; 0x7000
 8000fee:	6213      	str	r3, [r2, #32]

    // Configure pins PA2 and PA3 for 10 MHz alternate function
    GPIOA->OSPEEDR &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear speed register
 8000ff0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ffa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ffe:	6093      	str	r3, [r2, #8]
    GPIOA->OSPEEDR |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // set speed register (0x01 - 10 MHz, 0x02 - 2 MHz, 0x03 - 50 MHz)
 8001000:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001004:	689b      	ldr	r3, [r3, #8]
 8001006:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800100a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800100e:	6093      	str	r3, [r2, #8]
    GPIOA->OTYPER  &= ~(0x0001     << (2)     | 0x0001     << (3));        // Clear output type register
 8001010:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001014:	889b      	ldrh	r3, [r3, #4]
 8001016:	b29b      	uxth	r3, r3
 8001018:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800101c:	f023 030c 	bic.w	r3, r3, #12
 8001020:	b29b      	uxth	r3, r3
 8001022:	8093      	strh	r3, [r2, #4]
    GPIOA->OTYPER  |=  (0x0000     << (2)     | 0x0000     << (3));        // Set output type register (0x00 - Push pull, 0x01 - Open drain)
 8001024:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001028:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800102c:	8892      	ldrh	r2, [r2, #4]
 800102e:	b292      	uxth	r2, r2
 8001030:	809a      	strh	r2, [r3, #4]
    GPIOA->MODER   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear mode register
 8001032:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800103c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001040:	6013      	str	r3, [r2, #0]
    GPIOA->MODER   |=  (0x00000002 << (2 * 2) | 0x00000002 << (3 * 2));    // Set mode register (0x00 - Input, 0x01 - Output, 0x02 - Alternate Function, 0x03 - Analog in/out)
 8001042:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800104c:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001050:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR   &= ~(0x00000003 << (2 * 2) | 0x00000003 << (3 * 2));    // Clear push/pull register
 8001052:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800105c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001060:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR   |=  (0x00000001 << (2 * 2) | 0x00000001 << (3 * 2));    // Set push/pull register (0x00 - No pull, 0x01 - Pull-up, 0x02 - Pull-down)
 8001062:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001066:	68db      	ldr	r3, [r3, #12]
 8001068:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800106c:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8001070:	60d3      	str	r3, [r2, #12]

    //Configure USART2
    USART2->CR1 &= ~0x00000001; // Disable USART2
 8001072:	4b4b      	ldr	r3, [pc, #300]	; (80011a0 <uart_init+0x22c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a4a      	ldr	r2, [pc, #296]	; (80011a0 <uart_init+0x22c>)
 8001078:	f023 0301 	bic.w	r3, r3, #1
 800107c:	6013      	str	r3, [r2, #0]
    USART2->CR2 &= ~0x00003000; // Clear CR2 Configuration
 800107e:	4b48      	ldr	r3, [pc, #288]	; (80011a0 <uart_init+0x22c>)
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	4a47      	ldr	r2, [pc, #284]	; (80011a0 <uart_init+0x22c>)
 8001084:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001088:	6053      	str	r3, [r2, #4]
    USART2->CR2 |=  0x00000000; // Set 1 stop bits
 800108a:	4b45      	ldr	r3, [pc, #276]	; (80011a0 <uart_init+0x22c>)
 800108c:	4a44      	ldr	r2, [pc, #272]	; (80011a0 <uart_init+0x22c>)
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	6053      	str	r3, [r2, #4]
    USART2->CR1 &= ~(0x00001000 | 0x00000400 | 0x00000200 | 0x00000008 | 0x00000004); // Clear CR1 Configuration
 8001092:	4b43      	ldr	r3, [pc, #268]	; (80011a0 <uart_init+0x22c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a42      	ldr	r2, [pc, #264]	; (80011a0 <uart_init+0x22c>)
 8001098:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800109c:	f023 030c 	bic.w	r3, r3, #12
 80010a0:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set word length to 8 bits
 80010a2:	4b3f      	ldr	r3, [pc, #252]	; (80011a0 <uart_init+0x22c>)
 80010a4:	4a3e      	ldr	r2, [pc, #248]	; (80011a0 <uart_init+0x22c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000000; // Set parity bits to none
 80010aa:	4b3d      	ldr	r3, [pc, #244]	; (80011a0 <uart_init+0x22c>)
 80010ac:	4a3c      	ldr	r2, [pc, #240]	; (80011a0 <uart_init+0x22c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	6013      	str	r3, [r2, #0]
    USART2->CR1 |=  0x00000004 | 0x00000008; // Set mode to RX and TX
 80010b2:	4b3b      	ldr	r3, [pc, #236]	; (80011a0 <uart_init+0x22c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a3a      	ldr	r2, [pc, #232]	; (80011a0 <uart_init+0x22c>)
 80010b8:	f043 030c 	orr.w	r3, r3, #12
 80010bc:	6013      	str	r3, [r2, #0]
    USART2->CR3 &= ~(0x00000100 | 0x00000200); // Clear CR3 Configuration
 80010be:	4b38      	ldr	r3, [pc, #224]	; (80011a0 <uart_init+0x22c>)
 80010c0:	689b      	ldr	r3, [r3, #8]
 80010c2:	4a37      	ldr	r2, [pc, #220]	; (80011a0 <uart_init+0x22c>)
 80010c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010c8:	6093      	str	r3, [r2, #8]
    USART2->CR3 |=  0x00000000; // Set hardware flow control to none
 80010ca:	4b35      	ldr	r3, [pc, #212]	; (80011a0 <uart_init+0x22c>)
 80010cc:	4a34      	ldr	r2, [pc, #208]	; (80011a0 <uart_init+0x22c>)
 80010ce:	689b      	ldr	r3, [r3, #8]
 80010d0:	6093      	str	r3, [r2, #8]

    uint32_t divider = 0, apbclock = 0, tmpreg = 0;
 80010d2:	2300      	movs	r3, #0
 80010d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80010d6:	2300      	movs	r3, #0
 80010d8:	647b      	str	r3, [r7, #68]	; 0x44
 80010da:	2300      	movs	r3, #0
 80010dc:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_ClocksTypeDef RCC_ClocksStatus;
    RCC_GetClocksFreq(&RCC_ClocksStatus); // Get USART2 Clock frequency
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fb5e 	bl	80007a4 <RCC_GetClocksFreq>
    apbclock = RCC_ClocksStatus.USART2CLK_Frequency;
 80010e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ea:	647b      	str	r3, [r7, #68]	; 0x44

    if ((USART2->CR1 & 0x00008000) != 0) {
 80010ec:	4b2c      	ldr	r3, [pc, #176]	; (80011a0 <uart_init+0x22c>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d010      	beq.n	800111a <uart_init+0x1a6>
      // (divider * 10) computing in case Oversampling mode is 8 Samples
      divider = (2 * apbclock) / baud;
 80010f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80010fa:	005a      	lsls	r2, r3, #1
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001102:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = (2 * apbclock) % baud;
 8001104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	687a      	ldr	r2, [r7, #4]
 800110a:	fbb3 f2f2 	udiv	r2, r3, r2
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	fb01 f202 	mul.w	r2, r1, r2
 8001114:	1a9b      	subs	r3, r3, r2
 8001116:	64bb      	str	r3, [r7, #72]	; 0x48
 8001118:	e00d      	b.n	8001136 <uart_init+0x1c2>
    } else {
      // (divider * 10) computing in case Oversampling mode is 16 Samples
      divider = apbclock / baud;
 800111a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001122:	64fb      	str	r3, [r7, #76]	; 0x4c
      tmpreg  = apbclock % baud;
 8001124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	fbb3 f2f2 	udiv	r2, r3, r2
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	fb01 f202 	mul.w	r2, r1, r2
 8001132:	1a9b      	subs	r3, r3, r2
 8001134:	64bb      	str	r3, [r7, #72]	; 0x48
    }

    if (tmpreg >=  baud / 2) {
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	085b      	lsrs	r3, r3, #1
 800113a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800113c:	429a      	cmp	r2, r3
 800113e:	d302      	bcc.n	8001146 <uart_init+0x1d2>
        divider++;
 8001140:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001142:	3301      	adds	r3, #1
 8001144:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    if ((USART2->CR1 & 0x00008000) != 0) {
 8001146:	4b16      	ldr	r3, [pc, #88]	; (80011a0 <uart_init+0x22c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00b      	beq.n	800116a <uart_init+0x1f6>
        // get the LSB of divider and shift it to the right by 1 bit
        tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8001152:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001154:	085b      	lsrs	r3, r3, #1
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	64bb      	str	r3, [r7, #72]	; 0x48
        // update the divider value
        divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 800115c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800115e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001162:	4013      	ands	r3, r2
 8001164:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001166:	4313      	orrs	r3, r2
 8001168:	64fb      	str	r3, [r7, #76]	; 0x4c
    }

    USART2->BRR = (uint16_t)divider; // Configure baud rate
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <uart_init+0x22c>)
 800116c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800116e:	b292      	uxth	r2, r2
 8001170:	819a      	strh	r2, [r3, #12]
    USART2->CR1 |= 0x00000001; // Enable USART2
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <uart_init+0x22c>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <uart_init+0x22c>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6013      	str	r3, [r2, #0]

    USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 800117e:	2201      	movs	r2, #1
 8001180:	4908      	ldr	r1, [pc, #32]	; (80011a4 <uart_init+0x230>)
 8001182:	4807      	ldr	r0, [pc, #28]	; (80011a0 <uart_init+0x22c>)
 8001184:	f7ff fdb6 	bl	8000cf4 <USART_ITConfig>
    NVIC_EnableIRQ(USART2_IRQn);
 8001188:	2026      	movs	r0, #38	; 0x26
 800118a:	f7ff fe5f 	bl	8000e4c <NVIC_EnableIRQ>
}
 800118e:	bf00      	nop
 8001190:	3750      	adds	r7, #80	; 0x50
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	2000002c 	.word	0x2000002c
 800119c:	40021000 	.word	0x40021000
 80011a0:	40004400 	.word	0x40004400
 80011a4:	00050105 	.word	0x00050105

080011a8 <initJoystick>:
#include "30010_io.h" 		// Input/output library for this course
#include "stm32f30x_gpio.h"


void initJoystick()
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0
	//Enable GPIO Clock
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE); //Enable clock for GPIO Port A
 80011ae:	2101      	movs	r1, #1
 80011b0:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80011b4:	f7ff fd0a 	bl	8000bcc <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE); //Enable clock for GPIO Port B
 80011b8:	2101      	movs	r1, #1
 80011ba:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80011be:	f7ff fd05 	bl	8000bcc <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE); //Enable clock for GPIO Port C
 80011c2:	2101      	movs	r1, #1
 80011c4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80011c8:	f7ff fd00 	bl	8000bcc <RCC_AHBPeriphClockCmd>

	//GPIO PA4 (Up)
    GPIO_InitTypeDef GPIO_InitStructA;
    GPIO_InitStructA.GPIO_Pin = GPIO_Pin_4; // bit to be set
 80011cc:	2310      	movs	r3, #16
 80011ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStructA.GPIO_Mode = GPIO_Mode_IN; // Input with pull-down resistor
 80011d0:	2300      	movs	r3, #0
 80011d2:	753b      	strb	r3, [r7, #20]
    GPIO_InitStructA.GPIO_Speed = GPIO_Speed_2MHz;
 80011d4:	2302      	movs	r3, #2
 80011d6:	757b      	strb	r3, [r7, #21]
    GPIO_Init(GPIOA, &GPIO_InitStructA);
 80011d8:	f107 0310 	add.w	r3, r7, #16
 80011dc:	4619      	mov	r1, r3
 80011de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e2:	f7ff f99d 	bl	8000520 <GPIO_Init>

    //GPIO PB0(Down) and PB5 (Center)
    GPIO_InitTypeDef GPIO_InitStructB;
    GPIO_InitStructB.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_5; // bit to be set
 80011e6:	2321      	movs	r3, #33	; 0x21
 80011e8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStructB.GPIO_Mode = GPIO_Mode_IN; // Input with pull-down resistor
 80011ea:	2300      	movs	r3, #0
 80011ec:	733b      	strb	r3, [r7, #12]
    GPIO_InitStructB.GPIO_Speed = GPIO_Speed_2MHz;
 80011ee:	2302      	movs	r3, #2
 80011f0:	737b      	strb	r3, [r7, #13]
    GPIO_Init(GPIOB, &GPIO_InitStructB);
 80011f2:	f107 0308 	add.w	r3, r7, #8
 80011f6:	4619      	mov	r1, r3
 80011f8:	4808      	ldr	r0, [pc, #32]	; (800121c <initJoystick+0x74>)
 80011fa:	f7ff f991 	bl	8000520 <GPIO_Init>

    //GPIO PC0 (Right) and PC1 (Left)
    GPIO_InitTypeDef GPIO_InitStructC;
    GPIO_InitStructC.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1; // bit to be set
 80011fe:	2303      	movs	r3, #3
 8001200:	603b      	str	r3, [r7, #0]
    GPIO_InitStructC.GPIO_Mode = GPIO_Mode_IN; // Input with pull-down resistor
 8001202:	2300      	movs	r3, #0
 8001204:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructC.GPIO_Speed = GPIO_Speed_2MHz;
 8001206:	2302      	movs	r3, #2
 8001208:	717b      	strb	r3, [r7, #5]
    GPIO_Init(GPIOC, &GPIO_InitStructC);
 800120a:	463b      	mov	r3, r7
 800120c:	4619      	mov	r1, r3
 800120e:	4804      	ldr	r0, [pc, #16]	; (8001220 <initJoystick+0x78>)
 8001210:	f7ff f986 	bl	8000520 <GPIO_Init>

}
 8001214:	bf00      	nop
 8001216:	3718      	adds	r7, #24
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	48000400 	.word	0x48000400
 8001220:	48000800 	.word	0x48000800

08001224 <initLed>:

	return(joystickPos);
}

void initLed()
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
	//Enable GPIO Clock
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE); //Enable clock for GPIO Port A
 800122a:	2101      	movs	r1, #1
 800122c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001230:	f7ff fccc 	bl	8000bcc <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE); //Enable clock for GPIO Port B
 8001234:	2101      	movs	r1, #1
 8001236:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800123a:	f7ff fcc7 	bl	8000bcc <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE); //Enable clock for GPIO Port C
 800123e:	2101      	movs	r1, #1
 8001240:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001244:	f7ff fcc2 	bl	8000bcc <RCC_AHBPeriphClockCmd>

	//GPIO PA9 (Blue)
    GPIO_InitTypeDef GPIO_InitStructA;
    GPIO_InitStructA.GPIO_Pin = GPIO_Pin_9; // bit to be set
 8001248:	f44f 7300 	mov.w	r3, #512	; 0x200
 800124c:	613b      	str	r3, [r7, #16]
    GPIO_InitStructA.GPIO_Mode = GPIO_Mode_OUT; // Input with pull-down resistor
 800124e:	2301      	movs	r3, #1
 8001250:	753b      	strb	r3, [r7, #20]
    GPIO_InitStructA.GPIO_Speed = GPIO_Speed_2MHz;
 8001252:	2302      	movs	r3, #2
 8001254:	757b      	strb	r3, [r7, #21]
    GPIO_Init(GPIOA, &GPIO_InitStructA);
 8001256:	f107 0310 	add.w	r3, r7, #16
 800125a:	4619      	mov	r1, r3
 800125c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001260:	f7ff f95e 	bl	8000520 <GPIO_Init>

    //GPIO PB4(Red)
    GPIO_InitTypeDef GPIO_InitStructB;
    GPIO_InitStructB.GPIO_Pin = GPIO_Pin_4; // bit to be set
 8001264:	2310      	movs	r3, #16
 8001266:	60bb      	str	r3, [r7, #8]
    GPIO_InitStructB.GPIO_Mode = GPIO_Mode_OUT; // Input with pull-down resistor
 8001268:	2301      	movs	r3, #1
 800126a:	733b      	strb	r3, [r7, #12]
    GPIO_InitStructB.GPIO_Speed = GPIO_Speed_2MHz;
 800126c:	2302      	movs	r3, #2
 800126e:	737b      	strb	r3, [r7, #13]
    GPIO_Init(GPIOB, &GPIO_InitStructB);
 8001270:	f107 0308 	add.w	r3, r7, #8
 8001274:	4619      	mov	r1, r3
 8001276:	4809      	ldr	r0, [pc, #36]	; (800129c <initLed+0x78>)
 8001278:	f7ff f952 	bl	8000520 <GPIO_Init>

    //GPIO PC7 (Green)
    GPIO_InitTypeDef GPIO_InitStructC;
    GPIO_InitStructC.GPIO_Pin = GPIO_Pin_7; // bit to be set
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	603b      	str	r3, [r7, #0]
    GPIO_InitStructC.GPIO_Mode = GPIO_Mode_OUT; // Input with pull-down resistor
 8001280:	2301      	movs	r3, #1
 8001282:	713b      	strb	r3, [r7, #4]
    GPIO_InitStructC.GPIO_Speed = GPIO_Speed_2MHz;
 8001284:	2302      	movs	r3, #2
 8001286:	717b      	strb	r3, [r7, #5]
    GPIO_Init(GPIOC, &GPIO_InitStructC);
 8001288:	463b      	mov	r3, r7
 800128a:	4619      	mov	r1, r3
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <initLed+0x7c>)
 800128e:	f7ff f947 	bl	8000520 <GPIO_Init>
}
 8001292:	bf00      	nop
 8001294:	3718      	adds	r7, #24
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	48000400 	.word	0x48000400
 80012a0:	48000800 	.word	0x48000800

080012a4 <initEXTINT>:
		GPIO_WriteBit(GPIOA, GPIO_Pin_9, Bit_RESET); //Blue
	}
}

void initEXTINT()
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 80012aa:	2101      	movs	r1, #1
 80012ac:	2001      	movs	r0, #1
 80012ae:	f7ff fcad 	bl	8000c0c <RCC_APB2PeriphClockCmd>

	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource5); //Center
 80012b2:	2105      	movs	r1, #5
 80012b4:	2001      	movs	r0, #1
 80012b6:	f7ff fcc9 	bl	8000c4c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOB, EXTI_PinSource0); //Down
 80012ba:	2100      	movs	r1, #0
 80012bc:	2001      	movs	r0, #1
 80012be:	f7ff fcc5 	bl	8000c4c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOA, EXTI_PinSource4); //Up
 80012c2:	2104      	movs	r1, #4
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff fcc1 	bl	8000c4c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource0); //Right
 80012ca:	2100      	movs	r1, #0
 80012cc:	2002      	movs	r0, #2
 80012ce:	f7ff fcbd 	bl	8000c4c <SYSCFG_EXTILineConfig>
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource1); //Left
 80012d2:	2101      	movs	r1, #1
 80012d4:	2002      	movs	r0, #2
 80012d6:	f7ff fcb9 	bl	8000c4c <SYSCFG_EXTILineConfig>


	//define and set EXTI
	EXTI_InitTypeDef EXTI_InitStruct0;
	EXTI_InitStruct0.EXTI_Line = EXTI_Line0; // line 0 see [RM p. 215]
 80012da:	2300      	movs	r3, #0
 80012dc:	62bb      	str	r3, [r7, #40]	; 0x28
	EXTI_InitStruct0.EXTI_LineCmd = ENABLE;
 80012de:	2301      	movs	r3, #1
 80012e0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	EXTI_InitStruct0.EXTI_Mode = EXTI_Mode_Interrupt;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	EXTI_InitStruct0.EXTI_Trigger = EXTI_Trigger_Rising;
 80012ea:	2308      	movs	r3, #8
 80012ec:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	EXTI_Init(&EXTI_InitStruct0);
 80012f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7fe ffbb 	bl	8000270 <EXTI_Init>

	EXTI_InitTypeDef EXTI_InitStruct1;
	EXTI_InitStruct1.EXTI_Line = EXTI_Line1; // line 1 see [RM p. 215]
 80012fa:	2301      	movs	r3, #1
 80012fc:	623b      	str	r3, [r7, #32]
	EXTI_InitStruct1.EXTI_LineCmd = ENABLE;
 80012fe:	2301      	movs	r3, #1
 8001300:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	EXTI_InitStruct1.EXTI_Mode = EXTI_Mode_Interrupt;
 8001304:	2300      	movs	r3, #0
 8001306:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	EXTI_InitStruct1.EXTI_Trigger = EXTI_Trigger_Rising;
 800130a:	2308      	movs	r3, #8
 800130c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	EXTI_Init(&EXTI_InitStruct1);
 8001310:	f107 0320 	add.w	r3, r7, #32
 8001314:	4618      	mov	r0, r3
 8001316:	f7fe ffab 	bl	8000270 <EXTI_Init>

	EXTI_InitTypeDef EXTI_InitStruct4;
	EXTI_InitStruct4.EXTI_Line = EXTI_Line4; // line 4 see [RM p. 215]
 800131a:	2304      	movs	r3, #4
 800131c:	61bb      	str	r3, [r7, #24]
	EXTI_InitStruct4.EXTI_LineCmd = ENABLE;
 800131e:	2301      	movs	r3, #1
 8001320:	77bb      	strb	r3, [r7, #30]
	EXTI_InitStruct4.EXTI_Mode = EXTI_Mode_Interrupt;
 8001322:	2300      	movs	r3, #0
 8001324:	773b      	strb	r3, [r7, #28]
	EXTI_InitStruct4.EXTI_Trigger = EXTI_Trigger_Rising;
 8001326:	2308      	movs	r3, #8
 8001328:	777b      	strb	r3, [r7, #29]
	EXTI_Init(&EXTI_InitStruct4);
 800132a:	f107 0318 	add.w	r3, r7, #24
 800132e:	4618      	mov	r0, r3
 8001330:	f7fe ff9e 	bl	8000270 <EXTI_Init>

	EXTI_InitTypeDef EXTI_InitStruct9_5;
	EXTI_InitStruct9_5.EXTI_Line = EXTI_Line5; // line 5 see [RM p. 215]
 8001334:	2305      	movs	r3, #5
 8001336:	613b      	str	r3, [r7, #16]
	EXTI_InitStruct9_5.EXTI_LineCmd = ENABLE;
 8001338:	2301      	movs	r3, #1
 800133a:	75bb      	strb	r3, [r7, #22]
	EXTI_InitStruct9_5.EXTI_Mode = EXTI_Mode_Interrupt;
 800133c:	2300      	movs	r3, #0
 800133e:	753b      	strb	r3, [r7, #20]
	EXTI_InitStruct9_5.EXTI_Trigger = EXTI_Trigger_Rising;
 8001340:	2308      	movs	r3, #8
 8001342:	757b      	strb	r3, [r7, #21]
	EXTI_Init(&EXTI_InitStruct9_5);
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	4618      	mov	r0, r3
 800134a:	f7fe ff91 	bl	8000270 <EXTI_Init>

	// setup NVIC
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 800134e:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8001352:	f7ff f9af 	bl	80006b4 <NVIC_PriorityGroupConfig>
	NVIC_InitTypeDef NVIC0_InitStruct;
	NVIC0_InitStruct.NVIC_IRQChannel = EXTI0_IRQn;
 8001356:	2306      	movs	r3, #6
 8001358:	733b      	strb	r3, [r7, #12]
	NVIC0_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 800135a:	2301      	movs	r3, #1
 800135c:	73fb      	strb	r3, [r7, #15]
	NVIC0_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 800135e:	2300      	movs	r3, #0
 8001360:	737b      	strb	r3, [r7, #13]
	NVIC0_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8001362:	2300      	movs	r3, #0
 8001364:	73bb      	strb	r3, [r7, #14]
	NVIC_Init(&NVIC0_InitStruct);
 8001366:	f107 030c 	add.w	r3, r7, #12
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f9b6 	bl	80006dc <NVIC_Init>

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 8001370:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8001374:	f7ff f99e 	bl	80006b4 <NVIC_PriorityGroupConfig>
	NVIC_InitTypeDef NVIC1_InitStruct;
	NVIC1_InitStruct.NVIC_IRQChannel = EXTI1_IRQn;
 8001378:	2307      	movs	r3, #7
 800137a:	723b      	strb	r3, [r7, #8]
	NVIC1_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 800137c:	2301      	movs	r3, #1
 800137e:	72fb      	strb	r3, [r7, #11]
	NVIC1_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 8001380:	2300      	movs	r3, #0
 8001382:	727b      	strb	r3, [r7, #9]
	NVIC1_InitStruct.NVIC_IRQChannelSubPriority = 0;
 8001384:	2300      	movs	r3, #0
 8001386:	72bb      	strb	r3, [r7, #10]
	NVIC_Init(&NVIC1_InitStruct);
 8001388:	f107 0308 	add.w	r3, r7, #8
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff f9a5 	bl	80006dc <NVIC_Init>

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 8001392:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 8001396:	f7ff f98d 	bl	80006b4 <NVIC_PriorityGroupConfig>
	NVIC_InitTypeDef NVIC4_InitStruct;
	NVIC4_InitStruct.NVIC_IRQChannel = EXTI4_IRQn;
 800139a:	230a      	movs	r3, #10
 800139c:	713b      	strb	r3, [r7, #4]
	NVIC4_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 800139e:	2301      	movs	r3, #1
 80013a0:	71fb      	strb	r3, [r7, #7]
	NVIC4_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 80013a2:	2300      	movs	r3, #0
 80013a4:	717b      	strb	r3, [r7, #5]
	NVIC4_InitStruct.NVIC_IRQChannelSubPriority = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	71bb      	strb	r3, [r7, #6]
	NVIC_Init(&NVIC4_InitStruct);
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	4618      	mov	r0, r3
 80013ae:	f7ff f995 	bl	80006dc <NVIC_Init>

	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 80013b2:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 80013b6:	f7ff f97d 	bl	80006b4 <NVIC_PriorityGroupConfig>
	NVIC_InitTypeDef NVIC9_5_InitStruct;
	NVIC9_5_InitStruct.NVIC_IRQChannel = EXTI9_5_IRQn;
 80013ba:	2317      	movs	r3, #23
 80013bc:	703b      	strb	r3, [r7, #0]
	NVIC9_5_InitStruct.NVIC_IRQChannelCmd = ENABLE;
 80013be:	2301      	movs	r3, #1
 80013c0:	70fb      	strb	r3, [r7, #3]
	NVIC9_5_InitStruct.NVIC_IRQChannelPreemptionPriority = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	707b      	strb	r3, [r7, #1]
	NVIC9_5_InitStruct.NVIC_IRQChannelSubPriority = 0;
 80013c6:	2300      	movs	r3, #0
 80013c8:	70bb      	strb	r3, [r7, #2]
	NVIC_Init(&NVIC9_5_InitStruct);
 80013ca:	463b      	mov	r3, r7
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f985 	bl	80006dc <NVIC_Init>
}
 80013d2:	bf00      	nop
 80013d4:	3730      	adds	r7, #48	; 0x30
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
	...

080013dc <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 80013dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af02      	add	r7, sp, #8
	printf("Right:%d |Up:%d | Center:%d | Left:%d | Down:%d \n",GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_0),GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_4),GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_5),GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_1),GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_0));
 80013e4:	2101      	movs	r1, #1
 80013e6:	4818      	ldr	r0, [pc, #96]	; (8001448 <EXTI0_IRQHandler+0x6c>)
 80013e8:	f7ff f930 	bl	800064c <GPIO_ReadInputDataBit>
 80013ec:	4603      	mov	r3, r0
 80013ee:	461d      	mov	r5, r3
 80013f0:	2110      	movs	r1, #16
 80013f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f6:	f7ff f929 	bl	800064c <GPIO_ReadInputDataBit>
 80013fa:	4603      	mov	r3, r0
 80013fc:	461e      	mov	r6, r3
 80013fe:	2120      	movs	r1, #32
 8001400:	4812      	ldr	r0, [pc, #72]	; (800144c <EXTI0_IRQHandler+0x70>)
 8001402:	f7ff f923 	bl	800064c <GPIO_ReadInputDataBit>
 8001406:	4603      	mov	r3, r0
 8001408:	4698      	mov	r8, r3
 800140a:	2102      	movs	r1, #2
 800140c:	480e      	ldr	r0, [pc, #56]	; (8001448 <EXTI0_IRQHandler+0x6c>)
 800140e:	f7ff f91d 	bl	800064c <GPIO_ReadInputDataBit>
 8001412:	4603      	mov	r3, r0
 8001414:	461c      	mov	r4, r3
 8001416:	2101      	movs	r1, #1
 8001418:	480c      	ldr	r0, [pc, #48]	; (800144c <EXTI0_IRQHandler+0x70>)
 800141a:	f7ff f917 	bl	800064c <GPIO_ReadInputDataBit>
 800141e:	4603      	mov	r3, r0
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	9400      	str	r4, [sp, #0]
 8001424:	4643      	mov	r3, r8
 8001426:	4632      	mov	r2, r6
 8001428:	4629      	mov	r1, r5
 800142a:	4809      	ldr	r0, [pc, #36]	; (8001450 <EXTI0_IRQHandler+0x74>)
 800142c:	f000 fa4c 	bl	80018c8 <iprintf>
	GPIO_WriteBit(GPIOC,GPIO_Pin_7,Bit_RESET);
 8001430:	2200      	movs	r2, #0
 8001432:	2180      	movs	r1, #128	; 0x80
 8001434:	4804      	ldr	r0, [pc, #16]	; (8001448 <EXTI0_IRQHandler+0x6c>)
 8001436:	f7ff f925 	bl	8000684 <GPIO_WriteBit>
	EXTI_ClearITPendingBit(EXTI_Line0);
 800143a:	2000      	movs	r0, #0
 800143c:	f7ff f856 	bl	80004ec <EXTI_ClearITPendingBit>
}
 8001440:	bf00      	nop
 8001442:	46bd      	mov	sp, r7
 8001444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001448:	48000800 	.word	0x48000800
 800144c:	48000400 	.word	0x48000400
 8001450:	08002a70 	.word	0x08002a70

08001454 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8001454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af02      	add	r7, sp, #8
	printf("Right:%d |Up:%d | Center:%d | Left:%d | Down:%d \n",GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_0),GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_4),GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_5),GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_1),GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_0));
 800145c:	2101      	movs	r1, #1
 800145e:	4818      	ldr	r0, [pc, #96]	; (80014c0 <EXTI1_IRQHandler+0x6c>)
 8001460:	f7ff f8f4 	bl	800064c <GPIO_ReadInputDataBit>
 8001464:	4603      	mov	r3, r0
 8001466:	461d      	mov	r5, r3
 8001468:	2110      	movs	r1, #16
 800146a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146e:	f7ff f8ed 	bl	800064c <GPIO_ReadInputDataBit>
 8001472:	4603      	mov	r3, r0
 8001474:	461e      	mov	r6, r3
 8001476:	2120      	movs	r1, #32
 8001478:	4812      	ldr	r0, [pc, #72]	; (80014c4 <EXTI1_IRQHandler+0x70>)
 800147a:	f7ff f8e7 	bl	800064c <GPIO_ReadInputDataBit>
 800147e:	4603      	mov	r3, r0
 8001480:	4698      	mov	r8, r3
 8001482:	2102      	movs	r1, #2
 8001484:	480e      	ldr	r0, [pc, #56]	; (80014c0 <EXTI1_IRQHandler+0x6c>)
 8001486:	f7ff f8e1 	bl	800064c <GPIO_ReadInputDataBit>
 800148a:	4603      	mov	r3, r0
 800148c:	461c      	mov	r4, r3
 800148e:	2101      	movs	r1, #1
 8001490:	480c      	ldr	r0, [pc, #48]	; (80014c4 <EXTI1_IRQHandler+0x70>)
 8001492:	f7ff f8db 	bl	800064c <GPIO_ReadInputDataBit>
 8001496:	4603      	mov	r3, r0
 8001498:	9301      	str	r3, [sp, #4]
 800149a:	9400      	str	r4, [sp, #0]
 800149c:	4643      	mov	r3, r8
 800149e:	4632      	mov	r2, r6
 80014a0:	4629      	mov	r1, r5
 80014a2:	4809      	ldr	r0, [pc, #36]	; (80014c8 <EXTI1_IRQHandler+0x74>)
 80014a4:	f000 fa10 	bl	80018c8 <iprintf>
	GPIO_WriteBit(GPIOC,GPIO_Pin_7,Bit_SET);
 80014a8:	2201      	movs	r2, #1
 80014aa:	2180      	movs	r1, #128	; 0x80
 80014ac:	4804      	ldr	r0, [pc, #16]	; (80014c0 <EXTI1_IRQHandler+0x6c>)
 80014ae:	f7ff f8e9 	bl	8000684 <GPIO_WriteBit>
	EXTI_ClearITPendingBit(EXTI_Line1);
 80014b2:	2001      	movs	r0, #1
 80014b4:	f7ff f81a 	bl	80004ec <EXTI_ClearITPendingBit>
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80014c0:	48000800 	.word	0x48000800
 80014c4:	48000400 	.word	0x48000400
 80014c8:	08002a70 	.word	0x08002a70

080014cc <EXTI4_IRQHandler>:

void EXTI4_IRQHandler(void)
{
 80014cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af02      	add	r7, sp, #8
	printf("Right:%d |Up:%d | Center:%d | Left:%d | Down:%d \n",GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_0),GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_4),GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_5),GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_1),GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_0));
 80014d4:	2101      	movs	r1, #1
 80014d6:	4818      	ldr	r0, [pc, #96]	; (8001538 <EXTI4_IRQHandler+0x6c>)
 80014d8:	f7ff f8b8 	bl	800064c <GPIO_ReadInputDataBit>
 80014dc:	4603      	mov	r3, r0
 80014de:	461d      	mov	r5, r3
 80014e0:	2110      	movs	r1, #16
 80014e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014e6:	f7ff f8b1 	bl	800064c <GPIO_ReadInputDataBit>
 80014ea:	4603      	mov	r3, r0
 80014ec:	461e      	mov	r6, r3
 80014ee:	2120      	movs	r1, #32
 80014f0:	4812      	ldr	r0, [pc, #72]	; (800153c <EXTI4_IRQHandler+0x70>)
 80014f2:	f7ff f8ab 	bl	800064c <GPIO_ReadInputDataBit>
 80014f6:	4603      	mov	r3, r0
 80014f8:	4698      	mov	r8, r3
 80014fa:	2102      	movs	r1, #2
 80014fc:	480e      	ldr	r0, [pc, #56]	; (8001538 <EXTI4_IRQHandler+0x6c>)
 80014fe:	f7ff f8a5 	bl	800064c <GPIO_ReadInputDataBit>
 8001502:	4603      	mov	r3, r0
 8001504:	461c      	mov	r4, r3
 8001506:	2101      	movs	r1, #1
 8001508:	480c      	ldr	r0, [pc, #48]	; (800153c <EXTI4_IRQHandler+0x70>)
 800150a:	f7ff f89f 	bl	800064c <GPIO_ReadInputDataBit>
 800150e:	4603      	mov	r3, r0
 8001510:	9301      	str	r3, [sp, #4]
 8001512:	9400      	str	r4, [sp, #0]
 8001514:	4643      	mov	r3, r8
 8001516:	4632      	mov	r2, r6
 8001518:	4629      	mov	r1, r5
 800151a:	4809      	ldr	r0, [pc, #36]	; (8001540 <EXTI4_IRQHandler+0x74>)
 800151c:	f000 f9d4 	bl	80018c8 <iprintf>
	GPIO_WriteBit(GPIOC,GPIO_Pin_7,Bit_SET);
 8001520:	2201      	movs	r2, #1
 8001522:	2180      	movs	r1, #128	; 0x80
 8001524:	4804      	ldr	r0, [pc, #16]	; (8001538 <EXTI4_IRQHandler+0x6c>)
 8001526:	f7ff f8ad 	bl	8000684 <GPIO_WriteBit>
	EXTI_ClearITPendingBit(EXTI_Line4);
 800152a:	2004      	movs	r0, #4
 800152c:	f7fe ffde 	bl	80004ec <EXTI_ClearITPendingBit>
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001538:	48000800 	.word	0x48000800
 800153c:	48000400 	.word	0x48000400
 8001540:	08002a70 	.word	0x08002a70

08001544 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8001544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af02      	add	r7, sp, #8
	if(EXTI_GetITStatus(EXTI_Line5) != RESET)
 800154c:	2005      	movs	r0, #5
 800154e:	f7fe ff95 	bl	800047c <EXTI_GetITStatus>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d02d      	beq.n	80015b4 <EXTI9_5_IRQHandler+0x70>
	{
		printf("Right:%d |Up:%d | Center:%d | Left:%d | Down:%d \n",GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_0),GPIO_ReadInputDataBit(GPIOA,GPIO_Pin_4),GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_5),GPIO_ReadInputDataBit(GPIOC,GPIO_Pin_1),GPIO_ReadInputDataBit(GPIOB,GPIO_Pin_0));
 8001558:	2101      	movs	r1, #1
 800155a:	4818      	ldr	r0, [pc, #96]	; (80015bc <EXTI9_5_IRQHandler+0x78>)
 800155c:	f7ff f876 	bl	800064c <GPIO_ReadInputDataBit>
 8001560:	4603      	mov	r3, r0
 8001562:	461d      	mov	r5, r3
 8001564:	2110      	movs	r1, #16
 8001566:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800156a:	f7ff f86f 	bl	800064c <GPIO_ReadInputDataBit>
 800156e:	4603      	mov	r3, r0
 8001570:	461e      	mov	r6, r3
 8001572:	2120      	movs	r1, #32
 8001574:	4812      	ldr	r0, [pc, #72]	; (80015c0 <EXTI9_5_IRQHandler+0x7c>)
 8001576:	f7ff f869 	bl	800064c <GPIO_ReadInputDataBit>
 800157a:	4603      	mov	r3, r0
 800157c:	4698      	mov	r8, r3
 800157e:	2102      	movs	r1, #2
 8001580:	480e      	ldr	r0, [pc, #56]	; (80015bc <EXTI9_5_IRQHandler+0x78>)
 8001582:	f7ff f863 	bl	800064c <GPIO_ReadInputDataBit>
 8001586:	4603      	mov	r3, r0
 8001588:	461c      	mov	r4, r3
 800158a:	2101      	movs	r1, #1
 800158c:	480c      	ldr	r0, [pc, #48]	; (80015c0 <EXTI9_5_IRQHandler+0x7c>)
 800158e:	f7ff f85d 	bl	800064c <GPIO_ReadInputDataBit>
 8001592:	4603      	mov	r3, r0
 8001594:	9301      	str	r3, [sp, #4]
 8001596:	9400      	str	r4, [sp, #0]
 8001598:	4643      	mov	r3, r8
 800159a:	4632      	mov	r2, r6
 800159c:	4629      	mov	r1, r5
 800159e:	4809      	ldr	r0, [pc, #36]	; (80015c4 <EXTI9_5_IRQHandler+0x80>)
 80015a0:	f000 f992 	bl	80018c8 <iprintf>
		GPIO_WriteBit(GPIOC,GPIO_Pin_7,Bit_SET);
 80015a4:	2201      	movs	r2, #1
 80015a6:	2180      	movs	r1, #128	; 0x80
 80015a8:	4804      	ldr	r0, [pc, #16]	; (80015bc <EXTI9_5_IRQHandler+0x78>)
 80015aa:	f7ff f86b 	bl	8000684 <GPIO_WriteBit>
		EXTI_ClearITPendingBit(EXTI_Line5);
 80015ae:	2005      	movs	r0, #5
 80015b0:	f7fe ff9c 	bl	80004ec <EXTI_ClearITPendingBit>
	}
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80015bc:	48000800 	.word	0x48000800
 80015c0:	48000400 	.word	0x48000400
 80015c4:	08002a70 	.word	0x08002a70

080015c8 <main>:

int main(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	uart_init(9600);
 80015cc:	f44f 5016 	mov.w	r0, #9600	; 0x2580
 80015d0:	f7ff fcd0 	bl	8000f74 <uart_init>
	printf("Joystick position program!\n");
 80015d4:	4804      	ldr	r0, [pc, #16]	; (80015e8 <main+0x20>)
 80015d6:	f000 f9fd 	bl	80019d4 <puts>
	initJoystick();
 80015da:	f7ff fde5 	bl	80011a8 <initJoystick>
	initLed();
 80015de:	f7ff fe21 	bl	8001224 <initLed>
	initEXTINT();
 80015e2:	f7ff fe5f 	bl	80012a4 <initEXTINT>

	while(1)
 80015e6:	e7fe      	b.n	80015e6 <main+0x1e>
 80015e8:	08002aa4 	.word	0x08002aa4

080015ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	e00a      	b.n	8001614 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80015fe:	f3af 8000 	nop.w
 8001602:	4601      	mov	r1, r0
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	1c5a      	adds	r2, r3, #1
 8001608:	60ba      	str	r2, [r7, #8]
 800160a:	b2ca      	uxtb	r2, r1
 800160c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	3301      	adds	r3, #1
 8001612:	617b      	str	r3, [r7, #20]
 8001614:	697a      	ldr	r2, [r7, #20]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	429a      	cmp	r2, r3
 800161a:	dbf0      	blt.n	80015fe <_read+0x12>
	}

return len;
 800161c:	687b      	ldr	r3, [r7, #4]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001626:	b480      	push	{r7}
 8001628:	b083      	sub	sp, #12
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
	return -1;
 800162e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001632:	4618      	mov	r0, r3
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr

0800163e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800163e:	b480      	push	{r7}
 8001640:	b083      	sub	sp, #12
 8001642:	af00      	add	r7, sp, #0
 8001644:	6078      	str	r0, [r7, #4]
 8001646:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800164e:	605a      	str	r2, [r3, #4]
	return 0;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr

0800165e <_isatty>:

int _isatty(int file)
{
 800165e:	b480      	push	{r7}
 8001660:	b083      	sub	sp, #12
 8001662:	af00      	add	r7, sp, #0
 8001664:	6078      	str	r0, [r7, #4]
	return 1;
 8001666:	2301      	movs	r3, #1
}
 8001668:	4618      	mov	r0, r3
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
	return 0;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3714      	adds	r7, #20
 8001686:	46bd      	mov	sp, r7
 8001688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168c:	4770      	bx	lr
	...

08001690 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001698:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <_sbrk+0x50>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d102      	bne.n	80016a6 <_sbrk+0x16>
		heap_end = &end;
 80016a0:	4b0f      	ldr	r3, [pc, #60]	; (80016e0 <_sbrk+0x50>)
 80016a2:	4a10      	ldr	r2, [pc, #64]	; (80016e4 <_sbrk+0x54>)
 80016a4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80016a6:	4b0e      	ldr	r3, [pc, #56]	; (80016e0 <_sbrk+0x50>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80016ac:	4b0c      	ldr	r3, [pc, #48]	; (80016e0 <_sbrk+0x50>)
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	4413      	add	r3, r2
 80016b4:	466a      	mov	r2, sp
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d907      	bls.n	80016ca <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80016ba:	f000 f8d3 	bl	8001864 <__errno>
 80016be:	4603      	mov	r3, r0
 80016c0:	220c      	movs	r2, #12
 80016c2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80016c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016c8:	e006      	b.n	80016d8 <_sbrk+0x48>
	}

	heap_end += incr;
 80016ca:	4b05      	ldr	r3, [pc, #20]	; (80016e0 <_sbrk+0x50>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	4413      	add	r3, r2
 80016d2:	4a03      	ldr	r2, [pc, #12]	; (80016e0 <_sbrk+0x50>)
 80016d4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80016d6:	68fb      	ldr	r3, [r7, #12]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	200001b0 	.word	0x200001b0
 80016e4:	200001c8 	.word	0x200001c8

080016e8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016ec:	4b1f      	ldr	r3, [pc, #124]	; (800176c <SystemInit+0x84>)
 80016ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016f2:	4a1e      	ldr	r2, [pc, #120]	; (800176c <SystemInit+0x84>)
 80016f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80016fc:	4b1c      	ldr	r3, [pc, #112]	; (8001770 <SystemInit+0x88>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a1b      	ldr	r2, [pc, #108]	; (8001770 <SystemInit+0x88>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00C;
 8001708:	4b19      	ldr	r3, [pc, #100]	; (8001770 <SystemInit+0x88>)
 800170a:	685a      	ldr	r2, [r3, #4]
 800170c:	4918      	ldr	r1, [pc, #96]	; (8001770 <SystemInit+0x88>)
 800170e:	4b19      	ldr	r3, [pc, #100]	; (8001774 <SystemInit+0x8c>)
 8001710:	4013      	ands	r3, r2
 8001712:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001714:	4b16      	ldr	r3, [pc, #88]	; (8001770 <SystemInit+0x88>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a15      	ldr	r2, [pc, #84]	; (8001770 <SystemInit+0x88>)
 800171a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800171e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001722:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <SystemInit+0x88>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a11      	ldr	r2, [pc, #68]	; (8001770 <SystemInit+0x88>)
 800172a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800172e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8001730:	4b0f      	ldr	r3, [pc, #60]	; (8001770 <SystemInit+0x88>)
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <SystemInit+0x88>)
 8001736:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800173a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <SystemInit+0x88>)
 800173e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001740:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <SystemInit+0x88>)
 8001742:	f023 030f 	bic.w	r3, r3, #15
 8001746:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= (uint32_t)0xFF00FCCC;
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <SystemInit+0x88>)
 800174a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800174c:	4908      	ldr	r1, [pc, #32]	; (8001770 <SystemInit+0x88>)
 800174e:	4b0a      	ldr	r3, [pc, #40]	; (8001778 <SystemInit+0x90>)
 8001750:	4013      	ands	r3, r2
 8001752:	630b      	str	r3, [r1, #48]	; 0x30
  
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <SystemInit+0x88>)
 8001756:	2200      	movs	r2, #0
 8001758:	609a      	str	r2, [r3, #8]

  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800175a:	f000 f80f 	bl	800177c <SetSysClock>
  
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800175e:	4b03      	ldr	r3, [pc, #12]	; (800176c <SystemInit+0x84>)
 8001760:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001764:	609a      	str	r2, [r3, #8]
#endif  
}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	e000ed00 	.word	0xe000ed00
 8001770:	40021000 	.word	0x40021000
 8001774:	f87fc00c 	.word	0xf87fc00c
 8001778:	ff00fccc 	.word	0xff00fccc

0800177c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).             
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  /* At this stage the HSI is already enabled and used as System clock source */
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/

  /* Enable Prefetch Buffer and set Flash Latency */
  FLASH->ACR = FLASH_ACR_PRFTBE | (uint32_t)FLASH_ACR_LATENCY_1;
 8001780:	4b21      	ldr	r3, [pc, #132]	; (8001808 <SetSysClock+0x8c>)
 8001782:	2212      	movs	r2, #18
 8001784:	601a      	str	r2, [r3, #0]

  /* HCLK = SYSCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001786:	4b21      	ldr	r3, [pc, #132]	; (800180c <SetSysClock+0x90>)
 8001788:	4a20      	ldr	r2, [pc, #128]	; (800180c <SetSysClock+0x90>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	6053      	str	r3, [r2, #4]

  /* PCLK2 = HCLK / 1 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800178e:	4b1f      	ldr	r3, [pc, #124]	; (800180c <SetSysClock+0x90>)
 8001790:	4a1e      	ldr	r2, [pc, #120]	; (800180c <SetSysClock+0x90>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	6053      	str	r3, [r2, #4]

  /* PCLK1 = HCLK / 2 */
  RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8001796:	4b1d      	ldr	r3, [pc, #116]	; (800180c <SetSysClock+0x90>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	4a1c      	ldr	r2, [pc, #112]	; (800180c <SetSysClock+0x90>)
 800179c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017a0:	6053      	str	r3, [r2, #4]

  /*  PLL configuration */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80017a2:	4b1a      	ldr	r3, [pc, #104]	; (800180c <SetSysClock+0x90>)
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4a19      	ldr	r2, [pc, #100]	; (800180c <SetSysClock+0x90>)
 80017a8:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80017ac:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSI_Div2 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL16);
 80017ae:	4b17      	ldr	r3, [pc, #92]	; (800180c <SetSysClock+0x90>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	4a16      	ldr	r2, [pc, #88]	; (800180c <SetSysClock+0x90>)
 80017b4:	f443 1360 	orr.w	r3, r3, #3670016	; 0x380000
 80017b8:	6053      	str	r3, [r2, #4]

  /* Enable PLL */
  RCC->CR |= RCC_CR_PLLON;
 80017ba:	4b14      	ldr	r3, [pc, #80]	; (800180c <SetSysClock+0x90>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4a13      	ldr	r2, [pc, #76]	; (800180c <SetSysClock+0x90>)
 80017c0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017c4:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is ready */
  while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80017c6:	bf00      	nop
 80017c8:	4b10      	ldr	r3, [pc, #64]	; (800180c <SetSysClock+0x90>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0f9      	beq.n	80017c8 <SetSysClock+0x4c>
  {
  }

  /* Select PLL as system clock source */
  RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <SetSysClock+0x90>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	4a0c      	ldr	r2, [pc, #48]	; (800180c <SetSysClock+0x90>)
 80017da:	f023 0303 	bic.w	r3, r3, #3
 80017de:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <SetSysClock+0x90>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	4a09      	ldr	r2, [pc, #36]	; (800180c <SetSysClock+0x90>)
 80017e6:	f043 0302 	orr.w	r3, r3, #2
 80017ea:	6053      	str	r3, [r2, #4]

  /* Wait till PLL is used as system clock source */
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80017ec:	bf00      	nop
 80017ee:	4b07      	ldr	r3, [pc, #28]	; (800180c <SetSysClock+0x90>)
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 030c 	and.w	r3, r3, #12
 80017f6:	2b08      	cmp	r3, #8
 80017f8:	d1f9      	bne.n	80017ee <SetSysClock+0x72>
  {
  }
}
 80017fa:	bf00      	nop
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40022000 	.word	0x40022000
 800180c:	40021000 	.word	0x40021000

08001810 <Reset_Handler>:
 8001810:	480d      	ldr	r0, [pc, #52]	; (8001848 <LoopForever+0x2>)
 8001812:	4685      	mov	sp, r0
 8001814:	480d      	ldr	r0, [pc, #52]	; (800184c <LoopForever+0x6>)
 8001816:	490e      	ldr	r1, [pc, #56]	; (8001850 <LoopForever+0xa>)
 8001818:	4a0e      	ldr	r2, [pc, #56]	; (8001854 <LoopForever+0xe>)
 800181a:	2300      	movs	r3, #0
 800181c:	e002      	b.n	8001824 <LoopCopyDataInit>

0800181e <CopyDataInit>:
 800181e:	58d4      	ldr	r4, [r2, r3]
 8001820:	50c4      	str	r4, [r0, r3]
 8001822:	3304      	adds	r3, #4

08001824 <LoopCopyDataInit>:
 8001824:	18c4      	adds	r4, r0, r3
 8001826:	428c      	cmp	r4, r1
 8001828:	d3f9      	bcc.n	800181e <CopyDataInit>
 800182a:	4a0b      	ldr	r2, [pc, #44]	; (8001858 <LoopForever+0x12>)
 800182c:	4c0b      	ldr	r4, [pc, #44]	; (800185c <LoopForever+0x16>)
 800182e:	2300      	movs	r3, #0
 8001830:	e001      	b.n	8001836 <LoopFillZerobss>

08001832 <FillZerobss>:
 8001832:	6013      	str	r3, [r2, #0]
 8001834:	3204      	adds	r2, #4

08001836 <LoopFillZerobss>:
 8001836:	42a2      	cmp	r2, r4
 8001838:	d3fb      	bcc.n	8001832 <FillZerobss>
 800183a:	f7ff ff55 	bl	80016e8 <SystemInit>
 800183e:	f000 f817 	bl	8001870 <__libc_init_array>
 8001842:	f7ff fec1 	bl	80015c8 <main>

08001846 <LoopForever>:
 8001846:	e7fe      	b.n	8001846 <LoopForever>
 8001848:	20004000 	.word	0x20004000
 800184c:	20000000 	.word	0x20000000
 8001850:	20000090 	.word	0x20000090
 8001854:	08002b60 	.word	0x08002b60
 8001858:	20000090 	.word	0x20000090
 800185c:	200001c4 	.word	0x200001c4

08001860 <ADC1_2_IRQHandler>:
 8001860:	e7fe      	b.n	8001860 <ADC1_2_IRQHandler>
	...

08001864 <__errno>:
 8001864:	4b01      	ldr	r3, [pc, #4]	; (800186c <__errno+0x8>)
 8001866:	6818      	ldr	r0, [r3, #0]
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	2000002c 	.word	0x2000002c

08001870 <__libc_init_array>:
 8001870:	b570      	push	{r4, r5, r6, lr}
 8001872:	4d0d      	ldr	r5, [pc, #52]	; (80018a8 <__libc_init_array+0x38>)
 8001874:	4c0d      	ldr	r4, [pc, #52]	; (80018ac <__libc_init_array+0x3c>)
 8001876:	1b64      	subs	r4, r4, r5
 8001878:	10a4      	asrs	r4, r4, #2
 800187a:	2600      	movs	r6, #0
 800187c:	42a6      	cmp	r6, r4
 800187e:	d109      	bne.n	8001894 <__libc_init_array+0x24>
 8001880:	4d0b      	ldr	r5, [pc, #44]	; (80018b0 <__libc_init_array+0x40>)
 8001882:	4c0c      	ldr	r4, [pc, #48]	; (80018b4 <__libc_init_array+0x44>)
 8001884:	f001 f8e8 	bl	8002a58 <_init>
 8001888:	1b64      	subs	r4, r4, r5
 800188a:	10a4      	asrs	r4, r4, #2
 800188c:	2600      	movs	r6, #0
 800188e:	42a6      	cmp	r6, r4
 8001890:	d105      	bne.n	800189e <__libc_init_array+0x2e>
 8001892:	bd70      	pop	{r4, r5, r6, pc}
 8001894:	f855 3b04 	ldr.w	r3, [r5], #4
 8001898:	4798      	blx	r3
 800189a:	3601      	adds	r6, #1
 800189c:	e7ee      	b.n	800187c <__libc_init_array+0xc>
 800189e:	f855 3b04 	ldr.w	r3, [r5], #4
 80018a2:	4798      	blx	r3
 80018a4:	3601      	adds	r6, #1
 80018a6:	e7f2      	b.n	800188e <__libc_init_array+0x1e>
 80018a8:	08002b58 	.word	0x08002b58
 80018ac:	08002b58 	.word	0x08002b58
 80018b0:	08002b58 	.word	0x08002b58
 80018b4:	08002b5c 	.word	0x08002b5c

080018b8 <memset>:
 80018b8:	4402      	add	r2, r0
 80018ba:	4603      	mov	r3, r0
 80018bc:	4293      	cmp	r3, r2
 80018be:	d100      	bne.n	80018c2 <memset+0xa>
 80018c0:	4770      	bx	lr
 80018c2:	f803 1b01 	strb.w	r1, [r3], #1
 80018c6:	e7f9      	b.n	80018bc <memset+0x4>

080018c8 <iprintf>:
 80018c8:	b40f      	push	{r0, r1, r2, r3}
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <iprintf+0x2c>)
 80018cc:	b513      	push	{r0, r1, r4, lr}
 80018ce:	681c      	ldr	r4, [r3, #0]
 80018d0:	b124      	cbz	r4, 80018dc <iprintf+0x14>
 80018d2:	69a3      	ldr	r3, [r4, #24]
 80018d4:	b913      	cbnz	r3, 80018dc <iprintf+0x14>
 80018d6:	4620      	mov	r0, r4
 80018d8:	f000 fb2c 	bl	8001f34 <__sinit>
 80018dc:	ab05      	add	r3, sp, #20
 80018de:	9a04      	ldr	r2, [sp, #16]
 80018e0:	68a1      	ldr	r1, [r4, #8]
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	4620      	mov	r0, r4
 80018e6:	f000 fd3d 	bl	8002364 <_vfiprintf_r>
 80018ea:	b002      	add	sp, #8
 80018ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018f0:	b004      	add	sp, #16
 80018f2:	4770      	bx	lr
 80018f4:	2000002c 	.word	0x2000002c

080018f8 <_puts_r>:
 80018f8:	b570      	push	{r4, r5, r6, lr}
 80018fa:	460e      	mov	r6, r1
 80018fc:	4605      	mov	r5, r0
 80018fe:	b118      	cbz	r0, 8001908 <_puts_r+0x10>
 8001900:	6983      	ldr	r3, [r0, #24]
 8001902:	b90b      	cbnz	r3, 8001908 <_puts_r+0x10>
 8001904:	f000 fb16 	bl	8001f34 <__sinit>
 8001908:	69ab      	ldr	r3, [r5, #24]
 800190a:	68ac      	ldr	r4, [r5, #8]
 800190c:	b913      	cbnz	r3, 8001914 <_puts_r+0x1c>
 800190e:	4628      	mov	r0, r5
 8001910:	f000 fb10 	bl	8001f34 <__sinit>
 8001914:	4b2c      	ldr	r3, [pc, #176]	; (80019c8 <_puts_r+0xd0>)
 8001916:	429c      	cmp	r4, r3
 8001918:	d120      	bne.n	800195c <_puts_r+0x64>
 800191a:	686c      	ldr	r4, [r5, #4]
 800191c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800191e:	07db      	lsls	r3, r3, #31
 8001920:	d405      	bmi.n	800192e <_puts_r+0x36>
 8001922:	89a3      	ldrh	r3, [r4, #12]
 8001924:	0598      	lsls	r0, r3, #22
 8001926:	d402      	bmi.n	800192e <_puts_r+0x36>
 8001928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800192a:	f000 fba1 	bl	8002070 <__retarget_lock_acquire_recursive>
 800192e:	89a3      	ldrh	r3, [r4, #12]
 8001930:	0719      	lsls	r1, r3, #28
 8001932:	d51d      	bpl.n	8001970 <_puts_r+0x78>
 8001934:	6923      	ldr	r3, [r4, #16]
 8001936:	b1db      	cbz	r3, 8001970 <_puts_r+0x78>
 8001938:	3e01      	subs	r6, #1
 800193a:	68a3      	ldr	r3, [r4, #8]
 800193c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001940:	3b01      	subs	r3, #1
 8001942:	60a3      	str	r3, [r4, #8]
 8001944:	bb39      	cbnz	r1, 8001996 <_puts_r+0x9e>
 8001946:	2b00      	cmp	r3, #0
 8001948:	da38      	bge.n	80019bc <_puts_r+0xc4>
 800194a:	4622      	mov	r2, r4
 800194c:	210a      	movs	r1, #10
 800194e:	4628      	mov	r0, r5
 8001950:	f000 f916 	bl	8001b80 <__swbuf_r>
 8001954:	3001      	adds	r0, #1
 8001956:	d011      	beq.n	800197c <_puts_r+0x84>
 8001958:	250a      	movs	r5, #10
 800195a:	e011      	b.n	8001980 <_puts_r+0x88>
 800195c:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <_puts_r+0xd4>)
 800195e:	429c      	cmp	r4, r3
 8001960:	d101      	bne.n	8001966 <_puts_r+0x6e>
 8001962:	68ac      	ldr	r4, [r5, #8]
 8001964:	e7da      	b.n	800191c <_puts_r+0x24>
 8001966:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <_puts_r+0xd8>)
 8001968:	429c      	cmp	r4, r3
 800196a:	bf08      	it	eq
 800196c:	68ec      	ldreq	r4, [r5, #12]
 800196e:	e7d5      	b.n	800191c <_puts_r+0x24>
 8001970:	4621      	mov	r1, r4
 8001972:	4628      	mov	r0, r5
 8001974:	f000 f956 	bl	8001c24 <__swsetup_r>
 8001978:	2800      	cmp	r0, #0
 800197a:	d0dd      	beq.n	8001938 <_puts_r+0x40>
 800197c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001980:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001982:	07da      	lsls	r2, r3, #31
 8001984:	d405      	bmi.n	8001992 <_puts_r+0x9a>
 8001986:	89a3      	ldrh	r3, [r4, #12]
 8001988:	059b      	lsls	r3, r3, #22
 800198a:	d402      	bmi.n	8001992 <_puts_r+0x9a>
 800198c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800198e:	f000 fb70 	bl	8002072 <__retarget_lock_release_recursive>
 8001992:	4628      	mov	r0, r5
 8001994:	bd70      	pop	{r4, r5, r6, pc}
 8001996:	2b00      	cmp	r3, #0
 8001998:	da04      	bge.n	80019a4 <_puts_r+0xac>
 800199a:	69a2      	ldr	r2, [r4, #24]
 800199c:	429a      	cmp	r2, r3
 800199e:	dc06      	bgt.n	80019ae <_puts_r+0xb6>
 80019a0:	290a      	cmp	r1, #10
 80019a2:	d004      	beq.n	80019ae <_puts_r+0xb6>
 80019a4:	6823      	ldr	r3, [r4, #0]
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	6022      	str	r2, [r4, #0]
 80019aa:	7019      	strb	r1, [r3, #0]
 80019ac:	e7c5      	b.n	800193a <_puts_r+0x42>
 80019ae:	4622      	mov	r2, r4
 80019b0:	4628      	mov	r0, r5
 80019b2:	f000 f8e5 	bl	8001b80 <__swbuf_r>
 80019b6:	3001      	adds	r0, #1
 80019b8:	d1bf      	bne.n	800193a <_puts_r+0x42>
 80019ba:	e7df      	b.n	800197c <_puts_r+0x84>
 80019bc:	6823      	ldr	r3, [r4, #0]
 80019be:	250a      	movs	r5, #10
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	6022      	str	r2, [r4, #0]
 80019c4:	701d      	strb	r5, [r3, #0]
 80019c6:	e7db      	b.n	8001980 <_puts_r+0x88>
 80019c8:	08002ae4 	.word	0x08002ae4
 80019cc:	08002b04 	.word	0x08002b04
 80019d0:	08002ac4 	.word	0x08002ac4

080019d4 <puts>:
 80019d4:	4b02      	ldr	r3, [pc, #8]	; (80019e0 <puts+0xc>)
 80019d6:	4601      	mov	r1, r0
 80019d8:	6818      	ldr	r0, [r3, #0]
 80019da:	f7ff bf8d 	b.w	80018f8 <_puts_r>
 80019de:	bf00      	nop
 80019e0:	2000002c 	.word	0x2000002c

080019e4 <setbuf>:
 80019e4:	2900      	cmp	r1, #0
 80019e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019ea:	bf0c      	ite	eq
 80019ec:	2202      	moveq	r2, #2
 80019ee:	2200      	movne	r2, #0
 80019f0:	f000 b800 	b.w	80019f4 <setvbuf>

080019f4 <setvbuf>:
 80019f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80019f8:	461d      	mov	r5, r3
 80019fa:	4b5d      	ldr	r3, [pc, #372]	; (8001b70 <setvbuf+0x17c>)
 80019fc:	681f      	ldr	r7, [r3, #0]
 80019fe:	4604      	mov	r4, r0
 8001a00:	460e      	mov	r6, r1
 8001a02:	4690      	mov	r8, r2
 8001a04:	b127      	cbz	r7, 8001a10 <setvbuf+0x1c>
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	b913      	cbnz	r3, 8001a10 <setvbuf+0x1c>
 8001a0a:	4638      	mov	r0, r7
 8001a0c:	f000 fa92 	bl	8001f34 <__sinit>
 8001a10:	4b58      	ldr	r3, [pc, #352]	; (8001b74 <setvbuf+0x180>)
 8001a12:	429c      	cmp	r4, r3
 8001a14:	d167      	bne.n	8001ae6 <setvbuf+0xf2>
 8001a16:	687c      	ldr	r4, [r7, #4]
 8001a18:	f1b8 0f02 	cmp.w	r8, #2
 8001a1c:	d006      	beq.n	8001a2c <setvbuf+0x38>
 8001a1e:	f1b8 0f01 	cmp.w	r8, #1
 8001a22:	f200 809f 	bhi.w	8001b64 <setvbuf+0x170>
 8001a26:	2d00      	cmp	r5, #0
 8001a28:	f2c0 809c 	blt.w	8001b64 <setvbuf+0x170>
 8001a2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001a2e:	07db      	lsls	r3, r3, #31
 8001a30:	d405      	bmi.n	8001a3e <setvbuf+0x4a>
 8001a32:	89a3      	ldrh	r3, [r4, #12]
 8001a34:	0598      	lsls	r0, r3, #22
 8001a36:	d402      	bmi.n	8001a3e <setvbuf+0x4a>
 8001a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a3a:	f000 fb19 	bl	8002070 <__retarget_lock_acquire_recursive>
 8001a3e:	4621      	mov	r1, r4
 8001a40:	4638      	mov	r0, r7
 8001a42:	f000 f9e3 	bl	8001e0c <_fflush_r>
 8001a46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001a48:	b141      	cbz	r1, 8001a5c <setvbuf+0x68>
 8001a4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001a4e:	4299      	cmp	r1, r3
 8001a50:	d002      	beq.n	8001a58 <setvbuf+0x64>
 8001a52:	4638      	mov	r0, r7
 8001a54:	f000 fb7c 	bl	8002150 <_free_r>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	6363      	str	r3, [r4, #52]	; 0x34
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	61a3      	str	r3, [r4, #24]
 8001a60:	6063      	str	r3, [r4, #4]
 8001a62:	89a3      	ldrh	r3, [r4, #12]
 8001a64:	0619      	lsls	r1, r3, #24
 8001a66:	d503      	bpl.n	8001a70 <setvbuf+0x7c>
 8001a68:	6921      	ldr	r1, [r4, #16]
 8001a6a:	4638      	mov	r0, r7
 8001a6c:	f000 fb70 	bl	8002150 <_free_r>
 8001a70:	89a3      	ldrh	r3, [r4, #12]
 8001a72:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8001a76:	f023 0303 	bic.w	r3, r3, #3
 8001a7a:	f1b8 0f02 	cmp.w	r8, #2
 8001a7e:	81a3      	strh	r3, [r4, #12]
 8001a80:	d06c      	beq.n	8001b5c <setvbuf+0x168>
 8001a82:	ab01      	add	r3, sp, #4
 8001a84:	466a      	mov	r2, sp
 8001a86:	4621      	mov	r1, r4
 8001a88:	4638      	mov	r0, r7
 8001a8a:	f000 faf3 	bl	8002074 <__swhatbuf_r>
 8001a8e:	89a3      	ldrh	r3, [r4, #12]
 8001a90:	4318      	orrs	r0, r3
 8001a92:	81a0      	strh	r0, [r4, #12]
 8001a94:	2d00      	cmp	r5, #0
 8001a96:	d130      	bne.n	8001afa <setvbuf+0x106>
 8001a98:	9d00      	ldr	r5, [sp, #0]
 8001a9a:	4628      	mov	r0, r5
 8001a9c:	f000 fb50 	bl	8002140 <malloc>
 8001aa0:	4606      	mov	r6, r0
 8001aa2:	2800      	cmp	r0, #0
 8001aa4:	d155      	bne.n	8001b52 <setvbuf+0x15e>
 8001aa6:	f8dd 9000 	ldr.w	r9, [sp]
 8001aaa:	45a9      	cmp	r9, r5
 8001aac:	d14a      	bne.n	8001b44 <setvbuf+0x150>
 8001aae:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60a2      	str	r2, [r4, #8]
 8001ab6:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8001aba:	6022      	str	r2, [r4, #0]
 8001abc:	6122      	str	r2, [r4, #16]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ac4:	6162      	str	r2, [r4, #20]
 8001ac6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001ac8:	f043 0302 	orr.w	r3, r3, #2
 8001acc:	07d2      	lsls	r2, r2, #31
 8001ace:	81a3      	strh	r3, [r4, #12]
 8001ad0:	d405      	bmi.n	8001ade <setvbuf+0xea>
 8001ad2:	f413 7f00 	tst.w	r3, #512	; 0x200
 8001ad6:	d102      	bne.n	8001ade <setvbuf+0xea>
 8001ad8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001ada:	f000 faca 	bl	8002072 <__retarget_lock_release_recursive>
 8001ade:	4628      	mov	r0, r5
 8001ae0:	b003      	add	sp, #12
 8001ae2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001ae6:	4b24      	ldr	r3, [pc, #144]	; (8001b78 <setvbuf+0x184>)
 8001ae8:	429c      	cmp	r4, r3
 8001aea:	d101      	bne.n	8001af0 <setvbuf+0xfc>
 8001aec:	68bc      	ldr	r4, [r7, #8]
 8001aee:	e793      	b.n	8001a18 <setvbuf+0x24>
 8001af0:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <setvbuf+0x188>)
 8001af2:	429c      	cmp	r4, r3
 8001af4:	bf08      	it	eq
 8001af6:	68fc      	ldreq	r4, [r7, #12]
 8001af8:	e78e      	b.n	8001a18 <setvbuf+0x24>
 8001afa:	2e00      	cmp	r6, #0
 8001afc:	d0cd      	beq.n	8001a9a <setvbuf+0xa6>
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	b913      	cbnz	r3, 8001b08 <setvbuf+0x114>
 8001b02:	4638      	mov	r0, r7
 8001b04:	f000 fa16 	bl	8001f34 <__sinit>
 8001b08:	f1b8 0f01 	cmp.w	r8, #1
 8001b0c:	bf08      	it	eq
 8001b0e:	89a3      	ldrheq	r3, [r4, #12]
 8001b10:	6026      	str	r6, [r4, #0]
 8001b12:	bf04      	itt	eq
 8001b14:	f043 0301 	orreq.w	r3, r3, #1
 8001b18:	81a3      	strheq	r3, [r4, #12]
 8001b1a:	89a2      	ldrh	r2, [r4, #12]
 8001b1c:	f012 0308 	ands.w	r3, r2, #8
 8001b20:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8001b24:	d01c      	beq.n	8001b60 <setvbuf+0x16c>
 8001b26:	07d3      	lsls	r3, r2, #31
 8001b28:	bf41      	itttt	mi
 8001b2a:	2300      	movmi	r3, #0
 8001b2c:	426d      	negmi	r5, r5
 8001b2e:	60a3      	strmi	r3, [r4, #8]
 8001b30:	61a5      	strmi	r5, [r4, #24]
 8001b32:	bf58      	it	pl
 8001b34:	60a5      	strpl	r5, [r4, #8]
 8001b36:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8001b38:	f015 0501 	ands.w	r5, r5, #1
 8001b3c:	d115      	bne.n	8001b6a <setvbuf+0x176>
 8001b3e:	f412 7f00 	tst.w	r2, #512	; 0x200
 8001b42:	e7c8      	b.n	8001ad6 <setvbuf+0xe2>
 8001b44:	4648      	mov	r0, r9
 8001b46:	f000 fafb 	bl	8002140 <malloc>
 8001b4a:	4606      	mov	r6, r0
 8001b4c:	2800      	cmp	r0, #0
 8001b4e:	d0ae      	beq.n	8001aae <setvbuf+0xba>
 8001b50:	464d      	mov	r5, r9
 8001b52:	89a3      	ldrh	r3, [r4, #12]
 8001b54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b58:	81a3      	strh	r3, [r4, #12]
 8001b5a:	e7d0      	b.n	8001afe <setvbuf+0x10a>
 8001b5c:	2500      	movs	r5, #0
 8001b5e:	e7a8      	b.n	8001ab2 <setvbuf+0xbe>
 8001b60:	60a3      	str	r3, [r4, #8]
 8001b62:	e7e8      	b.n	8001b36 <setvbuf+0x142>
 8001b64:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8001b68:	e7b9      	b.n	8001ade <setvbuf+0xea>
 8001b6a:	2500      	movs	r5, #0
 8001b6c:	e7b7      	b.n	8001ade <setvbuf+0xea>
 8001b6e:	bf00      	nop
 8001b70:	2000002c 	.word	0x2000002c
 8001b74:	08002ae4 	.word	0x08002ae4
 8001b78:	08002b04 	.word	0x08002b04
 8001b7c:	08002ac4 	.word	0x08002ac4

08001b80 <__swbuf_r>:
 8001b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b82:	460e      	mov	r6, r1
 8001b84:	4614      	mov	r4, r2
 8001b86:	4605      	mov	r5, r0
 8001b88:	b118      	cbz	r0, 8001b92 <__swbuf_r+0x12>
 8001b8a:	6983      	ldr	r3, [r0, #24]
 8001b8c:	b90b      	cbnz	r3, 8001b92 <__swbuf_r+0x12>
 8001b8e:	f000 f9d1 	bl	8001f34 <__sinit>
 8001b92:	4b21      	ldr	r3, [pc, #132]	; (8001c18 <__swbuf_r+0x98>)
 8001b94:	429c      	cmp	r4, r3
 8001b96:	d12b      	bne.n	8001bf0 <__swbuf_r+0x70>
 8001b98:	686c      	ldr	r4, [r5, #4]
 8001b9a:	69a3      	ldr	r3, [r4, #24]
 8001b9c:	60a3      	str	r3, [r4, #8]
 8001b9e:	89a3      	ldrh	r3, [r4, #12]
 8001ba0:	071a      	lsls	r2, r3, #28
 8001ba2:	d52f      	bpl.n	8001c04 <__swbuf_r+0x84>
 8001ba4:	6923      	ldr	r3, [r4, #16]
 8001ba6:	b36b      	cbz	r3, 8001c04 <__swbuf_r+0x84>
 8001ba8:	6923      	ldr	r3, [r4, #16]
 8001baa:	6820      	ldr	r0, [r4, #0]
 8001bac:	1ac0      	subs	r0, r0, r3
 8001bae:	6963      	ldr	r3, [r4, #20]
 8001bb0:	b2f6      	uxtb	r6, r6
 8001bb2:	4283      	cmp	r3, r0
 8001bb4:	4637      	mov	r7, r6
 8001bb6:	dc04      	bgt.n	8001bc2 <__swbuf_r+0x42>
 8001bb8:	4621      	mov	r1, r4
 8001bba:	4628      	mov	r0, r5
 8001bbc:	f000 f926 	bl	8001e0c <_fflush_r>
 8001bc0:	bb30      	cbnz	r0, 8001c10 <__swbuf_r+0x90>
 8001bc2:	68a3      	ldr	r3, [r4, #8]
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	60a3      	str	r3, [r4, #8]
 8001bc8:	6823      	ldr	r3, [r4, #0]
 8001bca:	1c5a      	adds	r2, r3, #1
 8001bcc:	6022      	str	r2, [r4, #0]
 8001bce:	701e      	strb	r6, [r3, #0]
 8001bd0:	6963      	ldr	r3, [r4, #20]
 8001bd2:	3001      	adds	r0, #1
 8001bd4:	4283      	cmp	r3, r0
 8001bd6:	d004      	beq.n	8001be2 <__swbuf_r+0x62>
 8001bd8:	89a3      	ldrh	r3, [r4, #12]
 8001bda:	07db      	lsls	r3, r3, #31
 8001bdc:	d506      	bpl.n	8001bec <__swbuf_r+0x6c>
 8001bde:	2e0a      	cmp	r6, #10
 8001be0:	d104      	bne.n	8001bec <__swbuf_r+0x6c>
 8001be2:	4621      	mov	r1, r4
 8001be4:	4628      	mov	r0, r5
 8001be6:	f000 f911 	bl	8001e0c <_fflush_r>
 8001bea:	b988      	cbnz	r0, 8001c10 <__swbuf_r+0x90>
 8001bec:	4638      	mov	r0, r7
 8001bee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bf0:	4b0a      	ldr	r3, [pc, #40]	; (8001c1c <__swbuf_r+0x9c>)
 8001bf2:	429c      	cmp	r4, r3
 8001bf4:	d101      	bne.n	8001bfa <__swbuf_r+0x7a>
 8001bf6:	68ac      	ldr	r4, [r5, #8]
 8001bf8:	e7cf      	b.n	8001b9a <__swbuf_r+0x1a>
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <__swbuf_r+0xa0>)
 8001bfc:	429c      	cmp	r4, r3
 8001bfe:	bf08      	it	eq
 8001c00:	68ec      	ldreq	r4, [r5, #12]
 8001c02:	e7ca      	b.n	8001b9a <__swbuf_r+0x1a>
 8001c04:	4621      	mov	r1, r4
 8001c06:	4628      	mov	r0, r5
 8001c08:	f000 f80c 	bl	8001c24 <__swsetup_r>
 8001c0c:	2800      	cmp	r0, #0
 8001c0e:	d0cb      	beq.n	8001ba8 <__swbuf_r+0x28>
 8001c10:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8001c14:	e7ea      	b.n	8001bec <__swbuf_r+0x6c>
 8001c16:	bf00      	nop
 8001c18:	08002ae4 	.word	0x08002ae4
 8001c1c:	08002b04 	.word	0x08002b04
 8001c20:	08002ac4 	.word	0x08002ac4

08001c24 <__swsetup_r>:
 8001c24:	4b32      	ldr	r3, [pc, #200]	; (8001cf0 <__swsetup_r+0xcc>)
 8001c26:	b570      	push	{r4, r5, r6, lr}
 8001c28:	681d      	ldr	r5, [r3, #0]
 8001c2a:	4606      	mov	r6, r0
 8001c2c:	460c      	mov	r4, r1
 8001c2e:	b125      	cbz	r5, 8001c3a <__swsetup_r+0x16>
 8001c30:	69ab      	ldr	r3, [r5, #24]
 8001c32:	b913      	cbnz	r3, 8001c3a <__swsetup_r+0x16>
 8001c34:	4628      	mov	r0, r5
 8001c36:	f000 f97d 	bl	8001f34 <__sinit>
 8001c3a:	4b2e      	ldr	r3, [pc, #184]	; (8001cf4 <__swsetup_r+0xd0>)
 8001c3c:	429c      	cmp	r4, r3
 8001c3e:	d10f      	bne.n	8001c60 <__swsetup_r+0x3c>
 8001c40:	686c      	ldr	r4, [r5, #4]
 8001c42:	89a3      	ldrh	r3, [r4, #12]
 8001c44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001c48:	0719      	lsls	r1, r3, #28
 8001c4a:	d42c      	bmi.n	8001ca6 <__swsetup_r+0x82>
 8001c4c:	06dd      	lsls	r5, r3, #27
 8001c4e:	d411      	bmi.n	8001c74 <__swsetup_r+0x50>
 8001c50:	2309      	movs	r3, #9
 8001c52:	6033      	str	r3, [r6, #0]
 8001c54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001c58:	81a3      	strh	r3, [r4, #12]
 8001c5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c5e:	e03e      	b.n	8001cde <__swsetup_r+0xba>
 8001c60:	4b25      	ldr	r3, [pc, #148]	; (8001cf8 <__swsetup_r+0xd4>)
 8001c62:	429c      	cmp	r4, r3
 8001c64:	d101      	bne.n	8001c6a <__swsetup_r+0x46>
 8001c66:	68ac      	ldr	r4, [r5, #8]
 8001c68:	e7eb      	b.n	8001c42 <__swsetup_r+0x1e>
 8001c6a:	4b24      	ldr	r3, [pc, #144]	; (8001cfc <__swsetup_r+0xd8>)
 8001c6c:	429c      	cmp	r4, r3
 8001c6e:	bf08      	it	eq
 8001c70:	68ec      	ldreq	r4, [r5, #12]
 8001c72:	e7e6      	b.n	8001c42 <__swsetup_r+0x1e>
 8001c74:	0758      	lsls	r0, r3, #29
 8001c76:	d512      	bpl.n	8001c9e <__swsetup_r+0x7a>
 8001c78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c7a:	b141      	cbz	r1, 8001c8e <__swsetup_r+0x6a>
 8001c7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c80:	4299      	cmp	r1, r3
 8001c82:	d002      	beq.n	8001c8a <__swsetup_r+0x66>
 8001c84:	4630      	mov	r0, r6
 8001c86:	f000 fa63 	bl	8002150 <_free_r>
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	6363      	str	r3, [r4, #52]	; 0x34
 8001c8e:	89a3      	ldrh	r3, [r4, #12]
 8001c90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001c94:	81a3      	strh	r3, [r4, #12]
 8001c96:	2300      	movs	r3, #0
 8001c98:	6063      	str	r3, [r4, #4]
 8001c9a:	6923      	ldr	r3, [r4, #16]
 8001c9c:	6023      	str	r3, [r4, #0]
 8001c9e:	89a3      	ldrh	r3, [r4, #12]
 8001ca0:	f043 0308 	orr.w	r3, r3, #8
 8001ca4:	81a3      	strh	r3, [r4, #12]
 8001ca6:	6923      	ldr	r3, [r4, #16]
 8001ca8:	b94b      	cbnz	r3, 8001cbe <__swsetup_r+0x9a>
 8001caa:	89a3      	ldrh	r3, [r4, #12]
 8001cac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001cb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cb4:	d003      	beq.n	8001cbe <__swsetup_r+0x9a>
 8001cb6:	4621      	mov	r1, r4
 8001cb8:	4630      	mov	r0, r6
 8001cba:	f000 fa01 	bl	80020c0 <__smakebuf_r>
 8001cbe:	89a0      	ldrh	r0, [r4, #12]
 8001cc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001cc4:	f010 0301 	ands.w	r3, r0, #1
 8001cc8:	d00a      	beq.n	8001ce0 <__swsetup_r+0xbc>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60a3      	str	r3, [r4, #8]
 8001cce:	6963      	ldr	r3, [r4, #20]
 8001cd0:	425b      	negs	r3, r3
 8001cd2:	61a3      	str	r3, [r4, #24]
 8001cd4:	6923      	ldr	r3, [r4, #16]
 8001cd6:	b943      	cbnz	r3, 8001cea <__swsetup_r+0xc6>
 8001cd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001cdc:	d1ba      	bne.n	8001c54 <__swsetup_r+0x30>
 8001cde:	bd70      	pop	{r4, r5, r6, pc}
 8001ce0:	0781      	lsls	r1, r0, #30
 8001ce2:	bf58      	it	pl
 8001ce4:	6963      	ldrpl	r3, [r4, #20]
 8001ce6:	60a3      	str	r3, [r4, #8]
 8001ce8:	e7f4      	b.n	8001cd4 <__swsetup_r+0xb0>
 8001cea:	2000      	movs	r0, #0
 8001cec:	e7f7      	b.n	8001cde <__swsetup_r+0xba>
 8001cee:	bf00      	nop
 8001cf0:	2000002c 	.word	0x2000002c
 8001cf4:	08002ae4 	.word	0x08002ae4
 8001cf8:	08002b04 	.word	0x08002b04
 8001cfc:	08002ac4 	.word	0x08002ac4

08001d00 <__sflush_r>:
 8001d00:	898a      	ldrh	r2, [r1, #12]
 8001d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d06:	4605      	mov	r5, r0
 8001d08:	0710      	lsls	r0, r2, #28
 8001d0a:	460c      	mov	r4, r1
 8001d0c:	d458      	bmi.n	8001dc0 <__sflush_r+0xc0>
 8001d0e:	684b      	ldr	r3, [r1, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	dc05      	bgt.n	8001d20 <__sflush_r+0x20>
 8001d14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	dc02      	bgt.n	8001d20 <__sflush_r+0x20>
 8001d1a:	2000      	movs	r0, #0
 8001d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d22:	2e00      	cmp	r6, #0
 8001d24:	d0f9      	beq.n	8001d1a <__sflush_r+0x1a>
 8001d26:	2300      	movs	r3, #0
 8001d28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001d2c:	682f      	ldr	r7, [r5, #0]
 8001d2e:	602b      	str	r3, [r5, #0]
 8001d30:	d032      	beq.n	8001d98 <__sflush_r+0x98>
 8001d32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d34:	89a3      	ldrh	r3, [r4, #12]
 8001d36:	075a      	lsls	r2, r3, #29
 8001d38:	d505      	bpl.n	8001d46 <__sflush_r+0x46>
 8001d3a:	6863      	ldr	r3, [r4, #4]
 8001d3c:	1ac0      	subs	r0, r0, r3
 8001d3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001d40:	b10b      	cbz	r3, 8001d46 <__sflush_r+0x46>
 8001d42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001d44:	1ac0      	subs	r0, r0, r3
 8001d46:	2300      	movs	r3, #0
 8001d48:	4602      	mov	r2, r0
 8001d4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001d4c:	6a21      	ldr	r1, [r4, #32]
 8001d4e:	4628      	mov	r0, r5
 8001d50:	47b0      	blx	r6
 8001d52:	1c43      	adds	r3, r0, #1
 8001d54:	89a3      	ldrh	r3, [r4, #12]
 8001d56:	d106      	bne.n	8001d66 <__sflush_r+0x66>
 8001d58:	6829      	ldr	r1, [r5, #0]
 8001d5a:	291d      	cmp	r1, #29
 8001d5c:	d82c      	bhi.n	8001db8 <__sflush_r+0xb8>
 8001d5e:	4a2a      	ldr	r2, [pc, #168]	; (8001e08 <__sflush_r+0x108>)
 8001d60:	40ca      	lsrs	r2, r1
 8001d62:	07d6      	lsls	r6, r2, #31
 8001d64:	d528      	bpl.n	8001db8 <__sflush_r+0xb8>
 8001d66:	2200      	movs	r2, #0
 8001d68:	6062      	str	r2, [r4, #4]
 8001d6a:	04d9      	lsls	r1, r3, #19
 8001d6c:	6922      	ldr	r2, [r4, #16]
 8001d6e:	6022      	str	r2, [r4, #0]
 8001d70:	d504      	bpl.n	8001d7c <__sflush_r+0x7c>
 8001d72:	1c42      	adds	r2, r0, #1
 8001d74:	d101      	bne.n	8001d7a <__sflush_r+0x7a>
 8001d76:	682b      	ldr	r3, [r5, #0]
 8001d78:	b903      	cbnz	r3, 8001d7c <__sflush_r+0x7c>
 8001d7a:	6560      	str	r0, [r4, #84]	; 0x54
 8001d7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d7e:	602f      	str	r7, [r5, #0]
 8001d80:	2900      	cmp	r1, #0
 8001d82:	d0ca      	beq.n	8001d1a <__sflush_r+0x1a>
 8001d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d88:	4299      	cmp	r1, r3
 8001d8a:	d002      	beq.n	8001d92 <__sflush_r+0x92>
 8001d8c:	4628      	mov	r0, r5
 8001d8e:	f000 f9df 	bl	8002150 <_free_r>
 8001d92:	2000      	movs	r0, #0
 8001d94:	6360      	str	r0, [r4, #52]	; 0x34
 8001d96:	e7c1      	b.n	8001d1c <__sflush_r+0x1c>
 8001d98:	6a21      	ldr	r1, [r4, #32]
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	4628      	mov	r0, r5
 8001d9e:	47b0      	blx	r6
 8001da0:	1c41      	adds	r1, r0, #1
 8001da2:	d1c7      	bne.n	8001d34 <__sflush_r+0x34>
 8001da4:	682b      	ldr	r3, [r5, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0c4      	beq.n	8001d34 <__sflush_r+0x34>
 8001daa:	2b1d      	cmp	r3, #29
 8001dac:	d001      	beq.n	8001db2 <__sflush_r+0xb2>
 8001dae:	2b16      	cmp	r3, #22
 8001db0:	d101      	bne.n	8001db6 <__sflush_r+0xb6>
 8001db2:	602f      	str	r7, [r5, #0]
 8001db4:	e7b1      	b.n	8001d1a <__sflush_r+0x1a>
 8001db6:	89a3      	ldrh	r3, [r4, #12]
 8001db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dbc:	81a3      	strh	r3, [r4, #12]
 8001dbe:	e7ad      	b.n	8001d1c <__sflush_r+0x1c>
 8001dc0:	690f      	ldr	r7, [r1, #16]
 8001dc2:	2f00      	cmp	r7, #0
 8001dc4:	d0a9      	beq.n	8001d1a <__sflush_r+0x1a>
 8001dc6:	0793      	lsls	r3, r2, #30
 8001dc8:	680e      	ldr	r6, [r1, #0]
 8001dca:	bf08      	it	eq
 8001dcc:	694b      	ldreq	r3, [r1, #20]
 8001dce:	600f      	str	r7, [r1, #0]
 8001dd0:	bf18      	it	ne
 8001dd2:	2300      	movne	r3, #0
 8001dd4:	eba6 0807 	sub.w	r8, r6, r7
 8001dd8:	608b      	str	r3, [r1, #8]
 8001dda:	f1b8 0f00 	cmp.w	r8, #0
 8001dde:	dd9c      	ble.n	8001d1a <__sflush_r+0x1a>
 8001de0:	6a21      	ldr	r1, [r4, #32]
 8001de2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001de4:	4643      	mov	r3, r8
 8001de6:	463a      	mov	r2, r7
 8001de8:	4628      	mov	r0, r5
 8001dea:	47b0      	blx	r6
 8001dec:	2800      	cmp	r0, #0
 8001dee:	dc06      	bgt.n	8001dfe <__sflush_r+0xfe>
 8001df0:	89a3      	ldrh	r3, [r4, #12]
 8001df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001df6:	81a3      	strh	r3, [r4, #12]
 8001df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dfc:	e78e      	b.n	8001d1c <__sflush_r+0x1c>
 8001dfe:	4407      	add	r7, r0
 8001e00:	eba8 0800 	sub.w	r8, r8, r0
 8001e04:	e7e9      	b.n	8001dda <__sflush_r+0xda>
 8001e06:	bf00      	nop
 8001e08:	20400001 	.word	0x20400001

08001e0c <_fflush_r>:
 8001e0c:	b538      	push	{r3, r4, r5, lr}
 8001e0e:	690b      	ldr	r3, [r1, #16]
 8001e10:	4605      	mov	r5, r0
 8001e12:	460c      	mov	r4, r1
 8001e14:	b913      	cbnz	r3, 8001e1c <_fflush_r+0x10>
 8001e16:	2500      	movs	r5, #0
 8001e18:	4628      	mov	r0, r5
 8001e1a:	bd38      	pop	{r3, r4, r5, pc}
 8001e1c:	b118      	cbz	r0, 8001e26 <_fflush_r+0x1a>
 8001e1e:	6983      	ldr	r3, [r0, #24]
 8001e20:	b90b      	cbnz	r3, 8001e26 <_fflush_r+0x1a>
 8001e22:	f000 f887 	bl	8001f34 <__sinit>
 8001e26:	4b14      	ldr	r3, [pc, #80]	; (8001e78 <_fflush_r+0x6c>)
 8001e28:	429c      	cmp	r4, r3
 8001e2a:	d11b      	bne.n	8001e64 <_fflush_r+0x58>
 8001e2c:	686c      	ldr	r4, [r5, #4]
 8001e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d0ef      	beq.n	8001e16 <_fflush_r+0xa>
 8001e36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001e38:	07d0      	lsls	r0, r2, #31
 8001e3a:	d404      	bmi.n	8001e46 <_fflush_r+0x3a>
 8001e3c:	0599      	lsls	r1, r3, #22
 8001e3e:	d402      	bmi.n	8001e46 <_fflush_r+0x3a>
 8001e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e42:	f000 f915 	bl	8002070 <__retarget_lock_acquire_recursive>
 8001e46:	4628      	mov	r0, r5
 8001e48:	4621      	mov	r1, r4
 8001e4a:	f7ff ff59 	bl	8001d00 <__sflush_r>
 8001e4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001e50:	07da      	lsls	r2, r3, #31
 8001e52:	4605      	mov	r5, r0
 8001e54:	d4e0      	bmi.n	8001e18 <_fflush_r+0xc>
 8001e56:	89a3      	ldrh	r3, [r4, #12]
 8001e58:	059b      	lsls	r3, r3, #22
 8001e5a:	d4dd      	bmi.n	8001e18 <_fflush_r+0xc>
 8001e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e5e:	f000 f908 	bl	8002072 <__retarget_lock_release_recursive>
 8001e62:	e7d9      	b.n	8001e18 <_fflush_r+0xc>
 8001e64:	4b05      	ldr	r3, [pc, #20]	; (8001e7c <_fflush_r+0x70>)
 8001e66:	429c      	cmp	r4, r3
 8001e68:	d101      	bne.n	8001e6e <_fflush_r+0x62>
 8001e6a:	68ac      	ldr	r4, [r5, #8]
 8001e6c:	e7df      	b.n	8001e2e <_fflush_r+0x22>
 8001e6e:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <_fflush_r+0x74>)
 8001e70:	429c      	cmp	r4, r3
 8001e72:	bf08      	it	eq
 8001e74:	68ec      	ldreq	r4, [r5, #12]
 8001e76:	e7da      	b.n	8001e2e <_fflush_r+0x22>
 8001e78:	08002ae4 	.word	0x08002ae4
 8001e7c:	08002b04 	.word	0x08002b04
 8001e80:	08002ac4 	.word	0x08002ac4

08001e84 <std>:
 8001e84:	2300      	movs	r3, #0
 8001e86:	b510      	push	{r4, lr}
 8001e88:	4604      	mov	r4, r0
 8001e8a:	e9c0 3300 	strd	r3, r3, [r0]
 8001e8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001e92:	6083      	str	r3, [r0, #8]
 8001e94:	8181      	strh	r1, [r0, #12]
 8001e96:	6643      	str	r3, [r0, #100]	; 0x64
 8001e98:	81c2      	strh	r2, [r0, #14]
 8001e9a:	6183      	str	r3, [r0, #24]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	2208      	movs	r2, #8
 8001ea0:	305c      	adds	r0, #92	; 0x5c
 8001ea2:	f7ff fd09 	bl	80018b8 <memset>
 8001ea6:	4b05      	ldr	r3, [pc, #20]	; (8001ebc <std+0x38>)
 8001ea8:	6263      	str	r3, [r4, #36]	; 0x24
 8001eaa:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <std+0x3c>)
 8001eac:	62a3      	str	r3, [r4, #40]	; 0x28
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <std+0x40>)
 8001eb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001eb2:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <std+0x44>)
 8001eb4:	6224      	str	r4, [r4, #32]
 8001eb6:	6323      	str	r3, [r4, #48]	; 0x30
 8001eb8:	bd10      	pop	{r4, pc}
 8001eba:	bf00      	nop
 8001ebc:	0800290d 	.word	0x0800290d
 8001ec0:	0800292f 	.word	0x0800292f
 8001ec4:	08002967 	.word	0x08002967
 8001ec8:	0800298b 	.word	0x0800298b

08001ecc <_cleanup_r>:
 8001ecc:	4901      	ldr	r1, [pc, #4]	; (8001ed4 <_cleanup_r+0x8>)
 8001ece:	f000 b8af 	b.w	8002030 <_fwalk_reent>
 8001ed2:	bf00      	nop
 8001ed4:	08001e0d 	.word	0x08001e0d

08001ed8 <__sfmoreglue>:
 8001ed8:	b570      	push	{r4, r5, r6, lr}
 8001eda:	2268      	movs	r2, #104	; 0x68
 8001edc:	1e4d      	subs	r5, r1, #1
 8001ede:	4355      	muls	r5, r2
 8001ee0:	460e      	mov	r6, r1
 8001ee2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001ee6:	f000 f99f 	bl	8002228 <_malloc_r>
 8001eea:	4604      	mov	r4, r0
 8001eec:	b140      	cbz	r0, 8001f00 <__sfmoreglue+0x28>
 8001eee:	2100      	movs	r1, #0
 8001ef0:	e9c0 1600 	strd	r1, r6, [r0]
 8001ef4:	300c      	adds	r0, #12
 8001ef6:	60a0      	str	r0, [r4, #8]
 8001ef8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001efc:	f7ff fcdc 	bl	80018b8 <memset>
 8001f00:	4620      	mov	r0, r4
 8001f02:	bd70      	pop	{r4, r5, r6, pc}

08001f04 <__sfp_lock_acquire>:
 8001f04:	4801      	ldr	r0, [pc, #4]	; (8001f0c <__sfp_lock_acquire+0x8>)
 8001f06:	f000 b8b3 	b.w	8002070 <__retarget_lock_acquire_recursive>
 8001f0a:	bf00      	nop
 8001f0c:	200001b5 	.word	0x200001b5

08001f10 <__sfp_lock_release>:
 8001f10:	4801      	ldr	r0, [pc, #4]	; (8001f18 <__sfp_lock_release+0x8>)
 8001f12:	f000 b8ae 	b.w	8002072 <__retarget_lock_release_recursive>
 8001f16:	bf00      	nop
 8001f18:	200001b5 	.word	0x200001b5

08001f1c <__sinit_lock_acquire>:
 8001f1c:	4801      	ldr	r0, [pc, #4]	; (8001f24 <__sinit_lock_acquire+0x8>)
 8001f1e:	f000 b8a7 	b.w	8002070 <__retarget_lock_acquire_recursive>
 8001f22:	bf00      	nop
 8001f24:	200001b6 	.word	0x200001b6

08001f28 <__sinit_lock_release>:
 8001f28:	4801      	ldr	r0, [pc, #4]	; (8001f30 <__sinit_lock_release+0x8>)
 8001f2a:	f000 b8a2 	b.w	8002072 <__retarget_lock_release_recursive>
 8001f2e:	bf00      	nop
 8001f30:	200001b6 	.word	0x200001b6

08001f34 <__sinit>:
 8001f34:	b510      	push	{r4, lr}
 8001f36:	4604      	mov	r4, r0
 8001f38:	f7ff fff0 	bl	8001f1c <__sinit_lock_acquire>
 8001f3c:	69a3      	ldr	r3, [r4, #24]
 8001f3e:	b11b      	cbz	r3, 8001f48 <__sinit+0x14>
 8001f40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f44:	f7ff bff0 	b.w	8001f28 <__sinit_lock_release>
 8001f48:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8001f4c:	6523      	str	r3, [r4, #80]	; 0x50
 8001f4e:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <__sinit+0x68>)
 8001f50:	4a13      	ldr	r2, [pc, #76]	; (8001fa0 <__sinit+0x6c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	62a2      	str	r2, [r4, #40]	; 0x28
 8001f56:	42a3      	cmp	r3, r4
 8001f58:	bf04      	itt	eq
 8001f5a:	2301      	moveq	r3, #1
 8001f5c:	61a3      	streq	r3, [r4, #24]
 8001f5e:	4620      	mov	r0, r4
 8001f60:	f000 f820 	bl	8001fa4 <__sfp>
 8001f64:	6060      	str	r0, [r4, #4]
 8001f66:	4620      	mov	r0, r4
 8001f68:	f000 f81c 	bl	8001fa4 <__sfp>
 8001f6c:	60a0      	str	r0, [r4, #8]
 8001f6e:	4620      	mov	r0, r4
 8001f70:	f000 f818 	bl	8001fa4 <__sfp>
 8001f74:	2200      	movs	r2, #0
 8001f76:	60e0      	str	r0, [r4, #12]
 8001f78:	2104      	movs	r1, #4
 8001f7a:	6860      	ldr	r0, [r4, #4]
 8001f7c:	f7ff ff82 	bl	8001e84 <std>
 8001f80:	68a0      	ldr	r0, [r4, #8]
 8001f82:	2201      	movs	r2, #1
 8001f84:	2109      	movs	r1, #9
 8001f86:	f7ff ff7d 	bl	8001e84 <std>
 8001f8a:	68e0      	ldr	r0, [r4, #12]
 8001f8c:	2202      	movs	r2, #2
 8001f8e:	2112      	movs	r1, #18
 8001f90:	f7ff ff78 	bl	8001e84 <std>
 8001f94:	2301      	movs	r3, #1
 8001f96:	61a3      	str	r3, [r4, #24]
 8001f98:	e7d2      	b.n	8001f40 <__sinit+0xc>
 8001f9a:	bf00      	nop
 8001f9c:	08002ac0 	.word	0x08002ac0
 8001fa0:	08001ecd 	.word	0x08001ecd

08001fa4 <__sfp>:
 8001fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fa6:	4607      	mov	r7, r0
 8001fa8:	f7ff ffac 	bl	8001f04 <__sfp_lock_acquire>
 8001fac:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <__sfp+0x84>)
 8001fae:	681e      	ldr	r6, [r3, #0]
 8001fb0:	69b3      	ldr	r3, [r6, #24]
 8001fb2:	b913      	cbnz	r3, 8001fba <__sfp+0x16>
 8001fb4:	4630      	mov	r0, r6
 8001fb6:	f7ff ffbd 	bl	8001f34 <__sinit>
 8001fba:	3648      	adds	r6, #72	; 0x48
 8001fbc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	d503      	bpl.n	8001fcc <__sfp+0x28>
 8001fc4:	6833      	ldr	r3, [r6, #0]
 8001fc6:	b30b      	cbz	r3, 800200c <__sfp+0x68>
 8001fc8:	6836      	ldr	r6, [r6, #0]
 8001fca:	e7f7      	b.n	8001fbc <__sfp+0x18>
 8001fcc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001fd0:	b9d5      	cbnz	r5, 8002008 <__sfp+0x64>
 8001fd2:	4b16      	ldr	r3, [pc, #88]	; (800202c <__sfp+0x88>)
 8001fd4:	60e3      	str	r3, [r4, #12]
 8001fd6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001fda:	6665      	str	r5, [r4, #100]	; 0x64
 8001fdc:	f000 f847 	bl	800206e <__retarget_lock_init_recursive>
 8001fe0:	f7ff ff96 	bl	8001f10 <__sfp_lock_release>
 8001fe4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001fe8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001fec:	6025      	str	r5, [r4, #0]
 8001fee:	61a5      	str	r5, [r4, #24]
 8001ff0:	2208      	movs	r2, #8
 8001ff2:	4629      	mov	r1, r5
 8001ff4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001ff8:	f7ff fc5e 	bl	80018b8 <memset>
 8001ffc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002000:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002004:	4620      	mov	r0, r4
 8002006:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002008:	3468      	adds	r4, #104	; 0x68
 800200a:	e7d9      	b.n	8001fc0 <__sfp+0x1c>
 800200c:	2104      	movs	r1, #4
 800200e:	4638      	mov	r0, r7
 8002010:	f7ff ff62 	bl	8001ed8 <__sfmoreglue>
 8002014:	4604      	mov	r4, r0
 8002016:	6030      	str	r0, [r6, #0]
 8002018:	2800      	cmp	r0, #0
 800201a:	d1d5      	bne.n	8001fc8 <__sfp+0x24>
 800201c:	f7ff ff78 	bl	8001f10 <__sfp_lock_release>
 8002020:	230c      	movs	r3, #12
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	e7ee      	b.n	8002004 <__sfp+0x60>
 8002026:	bf00      	nop
 8002028:	08002ac0 	.word	0x08002ac0
 800202c:	ffff0001 	.word	0xffff0001

08002030 <_fwalk_reent>:
 8002030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002034:	4606      	mov	r6, r0
 8002036:	4688      	mov	r8, r1
 8002038:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800203c:	2700      	movs	r7, #0
 800203e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002042:	f1b9 0901 	subs.w	r9, r9, #1
 8002046:	d505      	bpl.n	8002054 <_fwalk_reent+0x24>
 8002048:	6824      	ldr	r4, [r4, #0]
 800204a:	2c00      	cmp	r4, #0
 800204c:	d1f7      	bne.n	800203e <_fwalk_reent+0xe>
 800204e:	4638      	mov	r0, r7
 8002050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002054:	89ab      	ldrh	r3, [r5, #12]
 8002056:	2b01      	cmp	r3, #1
 8002058:	d907      	bls.n	800206a <_fwalk_reent+0x3a>
 800205a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800205e:	3301      	adds	r3, #1
 8002060:	d003      	beq.n	800206a <_fwalk_reent+0x3a>
 8002062:	4629      	mov	r1, r5
 8002064:	4630      	mov	r0, r6
 8002066:	47c0      	blx	r8
 8002068:	4307      	orrs	r7, r0
 800206a:	3568      	adds	r5, #104	; 0x68
 800206c:	e7e9      	b.n	8002042 <_fwalk_reent+0x12>

0800206e <__retarget_lock_init_recursive>:
 800206e:	4770      	bx	lr

08002070 <__retarget_lock_acquire_recursive>:
 8002070:	4770      	bx	lr

08002072 <__retarget_lock_release_recursive>:
 8002072:	4770      	bx	lr

08002074 <__swhatbuf_r>:
 8002074:	b570      	push	{r4, r5, r6, lr}
 8002076:	460e      	mov	r6, r1
 8002078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800207c:	2900      	cmp	r1, #0
 800207e:	b096      	sub	sp, #88	; 0x58
 8002080:	4614      	mov	r4, r2
 8002082:	461d      	mov	r5, r3
 8002084:	da08      	bge.n	8002098 <__swhatbuf_r+0x24>
 8002086:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800208a:	2200      	movs	r2, #0
 800208c:	602a      	str	r2, [r5, #0]
 800208e:	061a      	lsls	r2, r3, #24
 8002090:	d410      	bmi.n	80020b4 <__swhatbuf_r+0x40>
 8002092:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002096:	e00e      	b.n	80020b6 <__swhatbuf_r+0x42>
 8002098:	466a      	mov	r2, sp
 800209a:	f000 fc8b 	bl	80029b4 <_fstat_r>
 800209e:	2800      	cmp	r0, #0
 80020a0:	dbf1      	blt.n	8002086 <__swhatbuf_r+0x12>
 80020a2:	9a01      	ldr	r2, [sp, #4]
 80020a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80020a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80020ac:	425a      	negs	r2, r3
 80020ae:	415a      	adcs	r2, r3
 80020b0:	602a      	str	r2, [r5, #0]
 80020b2:	e7ee      	b.n	8002092 <__swhatbuf_r+0x1e>
 80020b4:	2340      	movs	r3, #64	; 0x40
 80020b6:	2000      	movs	r0, #0
 80020b8:	6023      	str	r3, [r4, #0]
 80020ba:	b016      	add	sp, #88	; 0x58
 80020bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080020c0 <__smakebuf_r>:
 80020c0:	898b      	ldrh	r3, [r1, #12]
 80020c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80020c4:	079d      	lsls	r5, r3, #30
 80020c6:	4606      	mov	r6, r0
 80020c8:	460c      	mov	r4, r1
 80020ca:	d507      	bpl.n	80020dc <__smakebuf_r+0x1c>
 80020cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80020d0:	6023      	str	r3, [r4, #0]
 80020d2:	6123      	str	r3, [r4, #16]
 80020d4:	2301      	movs	r3, #1
 80020d6:	6163      	str	r3, [r4, #20]
 80020d8:	b002      	add	sp, #8
 80020da:	bd70      	pop	{r4, r5, r6, pc}
 80020dc:	ab01      	add	r3, sp, #4
 80020de:	466a      	mov	r2, sp
 80020e0:	f7ff ffc8 	bl	8002074 <__swhatbuf_r>
 80020e4:	9900      	ldr	r1, [sp, #0]
 80020e6:	4605      	mov	r5, r0
 80020e8:	4630      	mov	r0, r6
 80020ea:	f000 f89d 	bl	8002228 <_malloc_r>
 80020ee:	b948      	cbnz	r0, 8002104 <__smakebuf_r+0x44>
 80020f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80020f4:	059a      	lsls	r2, r3, #22
 80020f6:	d4ef      	bmi.n	80020d8 <__smakebuf_r+0x18>
 80020f8:	f023 0303 	bic.w	r3, r3, #3
 80020fc:	f043 0302 	orr.w	r3, r3, #2
 8002100:	81a3      	strh	r3, [r4, #12]
 8002102:	e7e3      	b.n	80020cc <__smakebuf_r+0xc>
 8002104:	4b0d      	ldr	r3, [pc, #52]	; (800213c <__smakebuf_r+0x7c>)
 8002106:	62b3      	str	r3, [r6, #40]	; 0x28
 8002108:	89a3      	ldrh	r3, [r4, #12]
 800210a:	6020      	str	r0, [r4, #0]
 800210c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002110:	81a3      	strh	r3, [r4, #12]
 8002112:	9b00      	ldr	r3, [sp, #0]
 8002114:	6163      	str	r3, [r4, #20]
 8002116:	9b01      	ldr	r3, [sp, #4]
 8002118:	6120      	str	r0, [r4, #16]
 800211a:	b15b      	cbz	r3, 8002134 <__smakebuf_r+0x74>
 800211c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002120:	4630      	mov	r0, r6
 8002122:	f000 fc59 	bl	80029d8 <_isatty_r>
 8002126:	b128      	cbz	r0, 8002134 <__smakebuf_r+0x74>
 8002128:	89a3      	ldrh	r3, [r4, #12]
 800212a:	f023 0303 	bic.w	r3, r3, #3
 800212e:	f043 0301 	orr.w	r3, r3, #1
 8002132:	81a3      	strh	r3, [r4, #12]
 8002134:	89a0      	ldrh	r0, [r4, #12]
 8002136:	4305      	orrs	r5, r0
 8002138:	81a5      	strh	r5, [r4, #12]
 800213a:	e7cd      	b.n	80020d8 <__smakebuf_r+0x18>
 800213c:	08001ecd 	.word	0x08001ecd

08002140 <malloc>:
 8002140:	4b02      	ldr	r3, [pc, #8]	; (800214c <malloc+0xc>)
 8002142:	4601      	mov	r1, r0
 8002144:	6818      	ldr	r0, [r3, #0]
 8002146:	f000 b86f 	b.w	8002228 <_malloc_r>
 800214a:	bf00      	nop
 800214c:	2000002c 	.word	0x2000002c

08002150 <_free_r>:
 8002150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002152:	2900      	cmp	r1, #0
 8002154:	d044      	beq.n	80021e0 <_free_r+0x90>
 8002156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800215a:	9001      	str	r0, [sp, #4]
 800215c:	2b00      	cmp	r3, #0
 800215e:	f1a1 0404 	sub.w	r4, r1, #4
 8002162:	bfb8      	it	lt
 8002164:	18e4      	addlt	r4, r4, r3
 8002166:	f000 fc59 	bl	8002a1c <__malloc_lock>
 800216a:	4a1e      	ldr	r2, [pc, #120]	; (80021e4 <_free_r+0x94>)
 800216c:	9801      	ldr	r0, [sp, #4]
 800216e:	6813      	ldr	r3, [r2, #0]
 8002170:	b933      	cbnz	r3, 8002180 <_free_r+0x30>
 8002172:	6063      	str	r3, [r4, #4]
 8002174:	6014      	str	r4, [r2, #0]
 8002176:	b003      	add	sp, #12
 8002178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800217c:	f000 bc54 	b.w	8002a28 <__malloc_unlock>
 8002180:	42a3      	cmp	r3, r4
 8002182:	d908      	bls.n	8002196 <_free_r+0x46>
 8002184:	6825      	ldr	r5, [r4, #0]
 8002186:	1961      	adds	r1, r4, r5
 8002188:	428b      	cmp	r3, r1
 800218a:	bf01      	itttt	eq
 800218c:	6819      	ldreq	r1, [r3, #0]
 800218e:	685b      	ldreq	r3, [r3, #4]
 8002190:	1949      	addeq	r1, r1, r5
 8002192:	6021      	streq	r1, [r4, #0]
 8002194:	e7ed      	b.n	8002172 <_free_r+0x22>
 8002196:	461a      	mov	r2, r3
 8002198:	685b      	ldr	r3, [r3, #4]
 800219a:	b10b      	cbz	r3, 80021a0 <_free_r+0x50>
 800219c:	42a3      	cmp	r3, r4
 800219e:	d9fa      	bls.n	8002196 <_free_r+0x46>
 80021a0:	6811      	ldr	r1, [r2, #0]
 80021a2:	1855      	adds	r5, r2, r1
 80021a4:	42a5      	cmp	r5, r4
 80021a6:	d10b      	bne.n	80021c0 <_free_r+0x70>
 80021a8:	6824      	ldr	r4, [r4, #0]
 80021aa:	4421      	add	r1, r4
 80021ac:	1854      	adds	r4, r2, r1
 80021ae:	42a3      	cmp	r3, r4
 80021b0:	6011      	str	r1, [r2, #0]
 80021b2:	d1e0      	bne.n	8002176 <_free_r+0x26>
 80021b4:	681c      	ldr	r4, [r3, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	6053      	str	r3, [r2, #4]
 80021ba:	4421      	add	r1, r4
 80021bc:	6011      	str	r1, [r2, #0]
 80021be:	e7da      	b.n	8002176 <_free_r+0x26>
 80021c0:	d902      	bls.n	80021c8 <_free_r+0x78>
 80021c2:	230c      	movs	r3, #12
 80021c4:	6003      	str	r3, [r0, #0]
 80021c6:	e7d6      	b.n	8002176 <_free_r+0x26>
 80021c8:	6825      	ldr	r5, [r4, #0]
 80021ca:	1961      	adds	r1, r4, r5
 80021cc:	428b      	cmp	r3, r1
 80021ce:	bf04      	itt	eq
 80021d0:	6819      	ldreq	r1, [r3, #0]
 80021d2:	685b      	ldreq	r3, [r3, #4]
 80021d4:	6063      	str	r3, [r4, #4]
 80021d6:	bf04      	itt	eq
 80021d8:	1949      	addeq	r1, r1, r5
 80021da:	6021      	streq	r1, [r4, #0]
 80021dc:	6054      	str	r4, [r2, #4]
 80021de:	e7ca      	b.n	8002176 <_free_r+0x26>
 80021e0:	b003      	add	sp, #12
 80021e2:	bd30      	pop	{r4, r5, pc}
 80021e4:	200001b8 	.word	0x200001b8

080021e8 <sbrk_aligned>:
 80021e8:	b570      	push	{r4, r5, r6, lr}
 80021ea:	4e0e      	ldr	r6, [pc, #56]	; (8002224 <sbrk_aligned+0x3c>)
 80021ec:	460c      	mov	r4, r1
 80021ee:	6831      	ldr	r1, [r6, #0]
 80021f0:	4605      	mov	r5, r0
 80021f2:	b911      	cbnz	r1, 80021fa <sbrk_aligned+0x12>
 80021f4:	f000 fb7a 	bl	80028ec <_sbrk_r>
 80021f8:	6030      	str	r0, [r6, #0]
 80021fa:	4621      	mov	r1, r4
 80021fc:	4628      	mov	r0, r5
 80021fe:	f000 fb75 	bl	80028ec <_sbrk_r>
 8002202:	1c43      	adds	r3, r0, #1
 8002204:	d00a      	beq.n	800221c <sbrk_aligned+0x34>
 8002206:	1cc4      	adds	r4, r0, #3
 8002208:	f024 0403 	bic.w	r4, r4, #3
 800220c:	42a0      	cmp	r0, r4
 800220e:	d007      	beq.n	8002220 <sbrk_aligned+0x38>
 8002210:	1a21      	subs	r1, r4, r0
 8002212:	4628      	mov	r0, r5
 8002214:	f000 fb6a 	bl	80028ec <_sbrk_r>
 8002218:	3001      	adds	r0, #1
 800221a:	d101      	bne.n	8002220 <sbrk_aligned+0x38>
 800221c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002220:	4620      	mov	r0, r4
 8002222:	bd70      	pop	{r4, r5, r6, pc}
 8002224:	200001bc 	.word	0x200001bc

08002228 <_malloc_r>:
 8002228:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800222c:	1ccd      	adds	r5, r1, #3
 800222e:	f025 0503 	bic.w	r5, r5, #3
 8002232:	3508      	adds	r5, #8
 8002234:	2d0c      	cmp	r5, #12
 8002236:	bf38      	it	cc
 8002238:	250c      	movcc	r5, #12
 800223a:	2d00      	cmp	r5, #0
 800223c:	4607      	mov	r7, r0
 800223e:	db01      	blt.n	8002244 <_malloc_r+0x1c>
 8002240:	42a9      	cmp	r1, r5
 8002242:	d905      	bls.n	8002250 <_malloc_r+0x28>
 8002244:	230c      	movs	r3, #12
 8002246:	603b      	str	r3, [r7, #0]
 8002248:	2600      	movs	r6, #0
 800224a:	4630      	mov	r0, r6
 800224c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002250:	4e2e      	ldr	r6, [pc, #184]	; (800230c <_malloc_r+0xe4>)
 8002252:	f000 fbe3 	bl	8002a1c <__malloc_lock>
 8002256:	6833      	ldr	r3, [r6, #0]
 8002258:	461c      	mov	r4, r3
 800225a:	bb34      	cbnz	r4, 80022aa <_malloc_r+0x82>
 800225c:	4629      	mov	r1, r5
 800225e:	4638      	mov	r0, r7
 8002260:	f7ff ffc2 	bl	80021e8 <sbrk_aligned>
 8002264:	1c43      	adds	r3, r0, #1
 8002266:	4604      	mov	r4, r0
 8002268:	d14d      	bne.n	8002306 <_malloc_r+0xde>
 800226a:	6834      	ldr	r4, [r6, #0]
 800226c:	4626      	mov	r6, r4
 800226e:	2e00      	cmp	r6, #0
 8002270:	d140      	bne.n	80022f4 <_malloc_r+0xcc>
 8002272:	6823      	ldr	r3, [r4, #0]
 8002274:	4631      	mov	r1, r6
 8002276:	4638      	mov	r0, r7
 8002278:	eb04 0803 	add.w	r8, r4, r3
 800227c:	f000 fb36 	bl	80028ec <_sbrk_r>
 8002280:	4580      	cmp	r8, r0
 8002282:	d13a      	bne.n	80022fa <_malloc_r+0xd2>
 8002284:	6821      	ldr	r1, [r4, #0]
 8002286:	3503      	adds	r5, #3
 8002288:	1a6d      	subs	r5, r5, r1
 800228a:	f025 0503 	bic.w	r5, r5, #3
 800228e:	3508      	adds	r5, #8
 8002290:	2d0c      	cmp	r5, #12
 8002292:	bf38      	it	cc
 8002294:	250c      	movcc	r5, #12
 8002296:	4629      	mov	r1, r5
 8002298:	4638      	mov	r0, r7
 800229a:	f7ff ffa5 	bl	80021e8 <sbrk_aligned>
 800229e:	3001      	adds	r0, #1
 80022a0:	d02b      	beq.n	80022fa <_malloc_r+0xd2>
 80022a2:	6823      	ldr	r3, [r4, #0]
 80022a4:	442b      	add	r3, r5
 80022a6:	6023      	str	r3, [r4, #0]
 80022a8:	e00e      	b.n	80022c8 <_malloc_r+0xa0>
 80022aa:	6822      	ldr	r2, [r4, #0]
 80022ac:	1b52      	subs	r2, r2, r5
 80022ae:	d41e      	bmi.n	80022ee <_malloc_r+0xc6>
 80022b0:	2a0b      	cmp	r2, #11
 80022b2:	d916      	bls.n	80022e2 <_malloc_r+0xba>
 80022b4:	1961      	adds	r1, r4, r5
 80022b6:	42a3      	cmp	r3, r4
 80022b8:	6025      	str	r5, [r4, #0]
 80022ba:	bf18      	it	ne
 80022bc:	6059      	strne	r1, [r3, #4]
 80022be:	6863      	ldr	r3, [r4, #4]
 80022c0:	bf08      	it	eq
 80022c2:	6031      	streq	r1, [r6, #0]
 80022c4:	5162      	str	r2, [r4, r5]
 80022c6:	604b      	str	r3, [r1, #4]
 80022c8:	4638      	mov	r0, r7
 80022ca:	f104 060b 	add.w	r6, r4, #11
 80022ce:	f000 fbab 	bl	8002a28 <__malloc_unlock>
 80022d2:	f026 0607 	bic.w	r6, r6, #7
 80022d6:	1d23      	adds	r3, r4, #4
 80022d8:	1af2      	subs	r2, r6, r3
 80022da:	d0b6      	beq.n	800224a <_malloc_r+0x22>
 80022dc:	1b9b      	subs	r3, r3, r6
 80022de:	50a3      	str	r3, [r4, r2]
 80022e0:	e7b3      	b.n	800224a <_malloc_r+0x22>
 80022e2:	6862      	ldr	r2, [r4, #4]
 80022e4:	42a3      	cmp	r3, r4
 80022e6:	bf0c      	ite	eq
 80022e8:	6032      	streq	r2, [r6, #0]
 80022ea:	605a      	strne	r2, [r3, #4]
 80022ec:	e7ec      	b.n	80022c8 <_malloc_r+0xa0>
 80022ee:	4623      	mov	r3, r4
 80022f0:	6864      	ldr	r4, [r4, #4]
 80022f2:	e7b2      	b.n	800225a <_malloc_r+0x32>
 80022f4:	4634      	mov	r4, r6
 80022f6:	6876      	ldr	r6, [r6, #4]
 80022f8:	e7b9      	b.n	800226e <_malloc_r+0x46>
 80022fa:	230c      	movs	r3, #12
 80022fc:	603b      	str	r3, [r7, #0]
 80022fe:	4638      	mov	r0, r7
 8002300:	f000 fb92 	bl	8002a28 <__malloc_unlock>
 8002304:	e7a1      	b.n	800224a <_malloc_r+0x22>
 8002306:	6025      	str	r5, [r4, #0]
 8002308:	e7de      	b.n	80022c8 <_malloc_r+0xa0>
 800230a:	bf00      	nop
 800230c:	200001b8 	.word	0x200001b8

08002310 <__sfputc_r>:
 8002310:	6893      	ldr	r3, [r2, #8]
 8002312:	3b01      	subs	r3, #1
 8002314:	2b00      	cmp	r3, #0
 8002316:	b410      	push	{r4}
 8002318:	6093      	str	r3, [r2, #8]
 800231a:	da08      	bge.n	800232e <__sfputc_r+0x1e>
 800231c:	6994      	ldr	r4, [r2, #24]
 800231e:	42a3      	cmp	r3, r4
 8002320:	db01      	blt.n	8002326 <__sfputc_r+0x16>
 8002322:	290a      	cmp	r1, #10
 8002324:	d103      	bne.n	800232e <__sfputc_r+0x1e>
 8002326:	f85d 4b04 	ldr.w	r4, [sp], #4
 800232a:	f7ff bc29 	b.w	8001b80 <__swbuf_r>
 800232e:	6813      	ldr	r3, [r2, #0]
 8002330:	1c58      	adds	r0, r3, #1
 8002332:	6010      	str	r0, [r2, #0]
 8002334:	7019      	strb	r1, [r3, #0]
 8002336:	4608      	mov	r0, r1
 8002338:	f85d 4b04 	ldr.w	r4, [sp], #4
 800233c:	4770      	bx	lr

0800233e <__sfputs_r>:
 800233e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002340:	4606      	mov	r6, r0
 8002342:	460f      	mov	r7, r1
 8002344:	4614      	mov	r4, r2
 8002346:	18d5      	adds	r5, r2, r3
 8002348:	42ac      	cmp	r4, r5
 800234a:	d101      	bne.n	8002350 <__sfputs_r+0x12>
 800234c:	2000      	movs	r0, #0
 800234e:	e007      	b.n	8002360 <__sfputs_r+0x22>
 8002350:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002354:	463a      	mov	r2, r7
 8002356:	4630      	mov	r0, r6
 8002358:	f7ff ffda 	bl	8002310 <__sfputc_r>
 800235c:	1c43      	adds	r3, r0, #1
 800235e:	d1f3      	bne.n	8002348 <__sfputs_r+0xa>
 8002360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002364 <_vfiprintf_r>:
 8002364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002368:	460d      	mov	r5, r1
 800236a:	b09d      	sub	sp, #116	; 0x74
 800236c:	4614      	mov	r4, r2
 800236e:	4698      	mov	r8, r3
 8002370:	4606      	mov	r6, r0
 8002372:	b118      	cbz	r0, 800237c <_vfiprintf_r+0x18>
 8002374:	6983      	ldr	r3, [r0, #24]
 8002376:	b90b      	cbnz	r3, 800237c <_vfiprintf_r+0x18>
 8002378:	f7ff fddc 	bl	8001f34 <__sinit>
 800237c:	4b89      	ldr	r3, [pc, #548]	; (80025a4 <_vfiprintf_r+0x240>)
 800237e:	429d      	cmp	r5, r3
 8002380:	d11b      	bne.n	80023ba <_vfiprintf_r+0x56>
 8002382:	6875      	ldr	r5, [r6, #4]
 8002384:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002386:	07d9      	lsls	r1, r3, #31
 8002388:	d405      	bmi.n	8002396 <_vfiprintf_r+0x32>
 800238a:	89ab      	ldrh	r3, [r5, #12]
 800238c:	059a      	lsls	r2, r3, #22
 800238e:	d402      	bmi.n	8002396 <_vfiprintf_r+0x32>
 8002390:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002392:	f7ff fe6d 	bl	8002070 <__retarget_lock_acquire_recursive>
 8002396:	89ab      	ldrh	r3, [r5, #12]
 8002398:	071b      	lsls	r3, r3, #28
 800239a:	d501      	bpl.n	80023a0 <_vfiprintf_r+0x3c>
 800239c:	692b      	ldr	r3, [r5, #16]
 800239e:	b9eb      	cbnz	r3, 80023dc <_vfiprintf_r+0x78>
 80023a0:	4629      	mov	r1, r5
 80023a2:	4630      	mov	r0, r6
 80023a4:	f7ff fc3e 	bl	8001c24 <__swsetup_r>
 80023a8:	b1c0      	cbz	r0, 80023dc <_vfiprintf_r+0x78>
 80023aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80023ac:	07dc      	lsls	r4, r3, #31
 80023ae:	d50e      	bpl.n	80023ce <_vfiprintf_r+0x6a>
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80023b4:	b01d      	add	sp, #116	; 0x74
 80023b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023ba:	4b7b      	ldr	r3, [pc, #492]	; (80025a8 <_vfiprintf_r+0x244>)
 80023bc:	429d      	cmp	r5, r3
 80023be:	d101      	bne.n	80023c4 <_vfiprintf_r+0x60>
 80023c0:	68b5      	ldr	r5, [r6, #8]
 80023c2:	e7df      	b.n	8002384 <_vfiprintf_r+0x20>
 80023c4:	4b79      	ldr	r3, [pc, #484]	; (80025ac <_vfiprintf_r+0x248>)
 80023c6:	429d      	cmp	r5, r3
 80023c8:	bf08      	it	eq
 80023ca:	68f5      	ldreq	r5, [r6, #12]
 80023cc:	e7da      	b.n	8002384 <_vfiprintf_r+0x20>
 80023ce:	89ab      	ldrh	r3, [r5, #12]
 80023d0:	0598      	lsls	r0, r3, #22
 80023d2:	d4ed      	bmi.n	80023b0 <_vfiprintf_r+0x4c>
 80023d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80023d6:	f7ff fe4c 	bl	8002072 <__retarget_lock_release_recursive>
 80023da:	e7e9      	b.n	80023b0 <_vfiprintf_r+0x4c>
 80023dc:	2300      	movs	r3, #0
 80023de:	9309      	str	r3, [sp, #36]	; 0x24
 80023e0:	2320      	movs	r3, #32
 80023e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80023e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80023ea:	2330      	movs	r3, #48	; 0x30
 80023ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80025b0 <_vfiprintf_r+0x24c>
 80023f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80023f4:	f04f 0901 	mov.w	r9, #1
 80023f8:	4623      	mov	r3, r4
 80023fa:	469a      	mov	sl, r3
 80023fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002400:	b10a      	cbz	r2, 8002406 <_vfiprintf_r+0xa2>
 8002402:	2a25      	cmp	r2, #37	; 0x25
 8002404:	d1f9      	bne.n	80023fa <_vfiprintf_r+0x96>
 8002406:	ebba 0b04 	subs.w	fp, sl, r4
 800240a:	d00b      	beq.n	8002424 <_vfiprintf_r+0xc0>
 800240c:	465b      	mov	r3, fp
 800240e:	4622      	mov	r2, r4
 8002410:	4629      	mov	r1, r5
 8002412:	4630      	mov	r0, r6
 8002414:	f7ff ff93 	bl	800233e <__sfputs_r>
 8002418:	3001      	adds	r0, #1
 800241a:	f000 80aa 	beq.w	8002572 <_vfiprintf_r+0x20e>
 800241e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002420:	445a      	add	r2, fp
 8002422:	9209      	str	r2, [sp, #36]	; 0x24
 8002424:	f89a 3000 	ldrb.w	r3, [sl]
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 80a2 	beq.w	8002572 <_vfiprintf_r+0x20e>
 800242e:	2300      	movs	r3, #0
 8002430:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002434:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002438:	f10a 0a01 	add.w	sl, sl, #1
 800243c:	9304      	str	r3, [sp, #16]
 800243e:	9307      	str	r3, [sp, #28]
 8002440:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002444:	931a      	str	r3, [sp, #104]	; 0x68
 8002446:	4654      	mov	r4, sl
 8002448:	2205      	movs	r2, #5
 800244a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800244e:	4858      	ldr	r0, [pc, #352]	; (80025b0 <_vfiprintf_r+0x24c>)
 8002450:	f7fd febe 	bl	80001d0 <memchr>
 8002454:	9a04      	ldr	r2, [sp, #16]
 8002456:	b9d8      	cbnz	r0, 8002490 <_vfiprintf_r+0x12c>
 8002458:	06d1      	lsls	r1, r2, #27
 800245a:	bf44      	itt	mi
 800245c:	2320      	movmi	r3, #32
 800245e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002462:	0713      	lsls	r3, r2, #28
 8002464:	bf44      	itt	mi
 8002466:	232b      	movmi	r3, #43	; 0x2b
 8002468:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800246c:	f89a 3000 	ldrb.w	r3, [sl]
 8002470:	2b2a      	cmp	r3, #42	; 0x2a
 8002472:	d015      	beq.n	80024a0 <_vfiprintf_r+0x13c>
 8002474:	9a07      	ldr	r2, [sp, #28]
 8002476:	4654      	mov	r4, sl
 8002478:	2000      	movs	r0, #0
 800247a:	f04f 0c0a 	mov.w	ip, #10
 800247e:	4621      	mov	r1, r4
 8002480:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002484:	3b30      	subs	r3, #48	; 0x30
 8002486:	2b09      	cmp	r3, #9
 8002488:	d94e      	bls.n	8002528 <_vfiprintf_r+0x1c4>
 800248a:	b1b0      	cbz	r0, 80024ba <_vfiprintf_r+0x156>
 800248c:	9207      	str	r2, [sp, #28]
 800248e:	e014      	b.n	80024ba <_vfiprintf_r+0x156>
 8002490:	eba0 0308 	sub.w	r3, r0, r8
 8002494:	fa09 f303 	lsl.w	r3, r9, r3
 8002498:	4313      	orrs	r3, r2
 800249a:	9304      	str	r3, [sp, #16]
 800249c:	46a2      	mov	sl, r4
 800249e:	e7d2      	b.n	8002446 <_vfiprintf_r+0xe2>
 80024a0:	9b03      	ldr	r3, [sp, #12]
 80024a2:	1d19      	adds	r1, r3, #4
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	9103      	str	r1, [sp, #12]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	bfbb      	ittet	lt
 80024ac:	425b      	neglt	r3, r3
 80024ae:	f042 0202 	orrlt.w	r2, r2, #2
 80024b2:	9307      	strge	r3, [sp, #28]
 80024b4:	9307      	strlt	r3, [sp, #28]
 80024b6:	bfb8      	it	lt
 80024b8:	9204      	strlt	r2, [sp, #16]
 80024ba:	7823      	ldrb	r3, [r4, #0]
 80024bc:	2b2e      	cmp	r3, #46	; 0x2e
 80024be:	d10c      	bne.n	80024da <_vfiprintf_r+0x176>
 80024c0:	7863      	ldrb	r3, [r4, #1]
 80024c2:	2b2a      	cmp	r3, #42	; 0x2a
 80024c4:	d135      	bne.n	8002532 <_vfiprintf_r+0x1ce>
 80024c6:	9b03      	ldr	r3, [sp, #12]
 80024c8:	1d1a      	adds	r2, r3, #4
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	9203      	str	r2, [sp, #12]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	bfb8      	it	lt
 80024d2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80024d6:	3402      	adds	r4, #2
 80024d8:	9305      	str	r3, [sp, #20]
 80024da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80025c0 <_vfiprintf_r+0x25c>
 80024de:	7821      	ldrb	r1, [r4, #0]
 80024e0:	2203      	movs	r2, #3
 80024e2:	4650      	mov	r0, sl
 80024e4:	f7fd fe74 	bl	80001d0 <memchr>
 80024e8:	b140      	cbz	r0, 80024fc <_vfiprintf_r+0x198>
 80024ea:	2340      	movs	r3, #64	; 0x40
 80024ec:	eba0 000a 	sub.w	r0, r0, sl
 80024f0:	fa03 f000 	lsl.w	r0, r3, r0
 80024f4:	9b04      	ldr	r3, [sp, #16]
 80024f6:	4303      	orrs	r3, r0
 80024f8:	3401      	adds	r4, #1
 80024fa:	9304      	str	r3, [sp, #16]
 80024fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002500:	482c      	ldr	r0, [pc, #176]	; (80025b4 <_vfiprintf_r+0x250>)
 8002502:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002506:	2206      	movs	r2, #6
 8002508:	f7fd fe62 	bl	80001d0 <memchr>
 800250c:	2800      	cmp	r0, #0
 800250e:	d03f      	beq.n	8002590 <_vfiprintf_r+0x22c>
 8002510:	4b29      	ldr	r3, [pc, #164]	; (80025b8 <_vfiprintf_r+0x254>)
 8002512:	bb1b      	cbnz	r3, 800255c <_vfiprintf_r+0x1f8>
 8002514:	9b03      	ldr	r3, [sp, #12]
 8002516:	3307      	adds	r3, #7
 8002518:	f023 0307 	bic.w	r3, r3, #7
 800251c:	3308      	adds	r3, #8
 800251e:	9303      	str	r3, [sp, #12]
 8002520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002522:	443b      	add	r3, r7
 8002524:	9309      	str	r3, [sp, #36]	; 0x24
 8002526:	e767      	b.n	80023f8 <_vfiprintf_r+0x94>
 8002528:	fb0c 3202 	mla	r2, ip, r2, r3
 800252c:	460c      	mov	r4, r1
 800252e:	2001      	movs	r0, #1
 8002530:	e7a5      	b.n	800247e <_vfiprintf_r+0x11a>
 8002532:	2300      	movs	r3, #0
 8002534:	3401      	adds	r4, #1
 8002536:	9305      	str	r3, [sp, #20]
 8002538:	4619      	mov	r1, r3
 800253a:	f04f 0c0a 	mov.w	ip, #10
 800253e:	4620      	mov	r0, r4
 8002540:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002544:	3a30      	subs	r2, #48	; 0x30
 8002546:	2a09      	cmp	r2, #9
 8002548:	d903      	bls.n	8002552 <_vfiprintf_r+0x1ee>
 800254a:	2b00      	cmp	r3, #0
 800254c:	d0c5      	beq.n	80024da <_vfiprintf_r+0x176>
 800254e:	9105      	str	r1, [sp, #20]
 8002550:	e7c3      	b.n	80024da <_vfiprintf_r+0x176>
 8002552:	fb0c 2101 	mla	r1, ip, r1, r2
 8002556:	4604      	mov	r4, r0
 8002558:	2301      	movs	r3, #1
 800255a:	e7f0      	b.n	800253e <_vfiprintf_r+0x1da>
 800255c:	ab03      	add	r3, sp, #12
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	462a      	mov	r2, r5
 8002562:	4b16      	ldr	r3, [pc, #88]	; (80025bc <_vfiprintf_r+0x258>)
 8002564:	a904      	add	r1, sp, #16
 8002566:	4630      	mov	r0, r6
 8002568:	f3af 8000 	nop.w
 800256c:	4607      	mov	r7, r0
 800256e:	1c78      	adds	r0, r7, #1
 8002570:	d1d6      	bne.n	8002520 <_vfiprintf_r+0x1bc>
 8002572:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002574:	07d9      	lsls	r1, r3, #31
 8002576:	d405      	bmi.n	8002584 <_vfiprintf_r+0x220>
 8002578:	89ab      	ldrh	r3, [r5, #12]
 800257a:	059a      	lsls	r2, r3, #22
 800257c:	d402      	bmi.n	8002584 <_vfiprintf_r+0x220>
 800257e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002580:	f7ff fd77 	bl	8002072 <__retarget_lock_release_recursive>
 8002584:	89ab      	ldrh	r3, [r5, #12]
 8002586:	065b      	lsls	r3, r3, #25
 8002588:	f53f af12 	bmi.w	80023b0 <_vfiprintf_r+0x4c>
 800258c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800258e:	e711      	b.n	80023b4 <_vfiprintf_r+0x50>
 8002590:	ab03      	add	r3, sp, #12
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	462a      	mov	r2, r5
 8002596:	4b09      	ldr	r3, [pc, #36]	; (80025bc <_vfiprintf_r+0x258>)
 8002598:	a904      	add	r1, sp, #16
 800259a:	4630      	mov	r0, r6
 800259c:	f000 f880 	bl	80026a0 <_printf_i>
 80025a0:	e7e4      	b.n	800256c <_vfiprintf_r+0x208>
 80025a2:	bf00      	nop
 80025a4:	08002ae4 	.word	0x08002ae4
 80025a8:	08002b04 	.word	0x08002b04
 80025ac:	08002ac4 	.word	0x08002ac4
 80025b0:	08002b24 	.word	0x08002b24
 80025b4:	08002b2e 	.word	0x08002b2e
 80025b8:	00000000 	.word	0x00000000
 80025bc:	0800233f 	.word	0x0800233f
 80025c0:	08002b2a 	.word	0x08002b2a

080025c4 <_printf_common>:
 80025c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025c8:	4616      	mov	r6, r2
 80025ca:	4699      	mov	r9, r3
 80025cc:	688a      	ldr	r2, [r1, #8]
 80025ce:	690b      	ldr	r3, [r1, #16]
 80025d0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80025d4:	4293      	cmp	r3, r2
 80025d6:	bfb8      	it	lt
 80025d8:	4613      	movlt	r3, r2
 80025da:	6033      	str	r3, [r6, #0]
 80025dc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80025e0:	4607      	mov	r7, r0
 80025e2:	460c      	mov	r4, r1
 80025e4:	b10a      	cbz	r2, 80025ea <_printf_common+0x26>
 80025e6:	3301      	adds	r3, #1
 80025e8:	6033      	str	r3, [r6, #0]
 80025ea:	6823      	ldr	r3, [r4, #0]
 80025ec:	0699      	lsls	r1, r3, #26
 80025ee:	bf42      	ittt	mi
 80025f0:	6833      	ldrmi	r3, [r6, #0]
 80025f2:	3302      	addmi	r3, #2
 80025f4:	6033      	strmi	r3, [r6, #0]
 80025f6:	6825      	ldr	r5, [r4, #0]
 80025f8:	f015 0506 	ands.w	r5, r5, #6
 80025fc:	d106      	bne.n	800260c <_printf_common+0x48>
 80025fe:	f104 0a19 	add.w	sl, r4, #25
 8002602:	68e3      	ldr	r3, [r4, #12]
 8002604:	6832      	ldr	r2, [r6, #0]
 8002606:	1a9b      	subs	r3, r3, r2
 8002608:	42ab      	cmp	r3, r5
 800260a:	dc26      	bgt.n	800265a <_printf_common+0x96>
 800260c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002610:	1e13      	subs	r3, r2, #0
 8002612:	6822      	ldr	r2, [r4, #0]
 8002614:	bf18      	it	ne
 8002616:	2301      	movne	r3, #1
 8002618:	0692      	lsls	r2, r2, #26
 800261a:	d42b      	bmi.n	8002674 <_printf_common+0xb0>
 800261c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002620:	4649      	mov	r1, r9
 8002622:	4638      	mov	r0, r7
 8002624:	47c0      	blx	r8
 8002626:	3001      	adds	r0, #1
 8002628:	d01e      	beq.n	8002668 <_printf_common+0xa4>
 800262a:	6823      	ldr	r3, [r4, #0]
 800262c:	68e5      	ldr	r5, [r4, #12]
 800262e:	6832      	ldr	r2, [r6, #0]
 8002630:	f003 0306 	and.w	r3, r3, #6
 8002634:	2b04      	cmp	r3, #4
 8002636:	bf08      	it	eq
 8002638:	1aad      	subeq	r5, r5, r2
 800263a:	68a3      	ldr	r3, [r4, #8]
 800263c:	6922      	ldr	r2, [r4, #16]
 800263e:	bf0c      	ite	eq
 8002640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002644:	2500      	movne	r5, #0
 8002646:	4293      	cmp	r3, r2
 8002648:	bfc4      	itt	gt
 800264a:	1a9b      	subgt	r3, r3, r2
 800264c:	18ed      	addgt	r5, r5, r3
 800264e:	2600      	movs	r6, #0
 8002650:	341a      	adds	r4, #26
 8002652:	42b5      	cmp	r5, r6
 8002654:	d11a      	bne.n	800268c <_printf_common+0xc8>
 8002656:	2000      	movs	r0, #0
 8002658:	e008      	b.n	800266c <_printf_common+0xa8>
 800265a:	2301      	movs	r3, #1
 800265c:	4652      	mov	r2, sl
 800265e:	4649      	mov	r1, r9
 8002660:	4638      	mov	r0, r7
 8002662:	47c0      	blx	r8
 8002664:	3001      	adds	r0, #1
 8002666:	d103      	bne.n	8002670 <_printf_common+0xac>
 8002668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800266c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002670:	3501      	adds	r5, #1
 8002672:	e7c6      	b.n	8002602 <_printf_common+0x3e>
 8002674:	18e1      	adds	r1, r4, r3
 8002676:	1c5a      	adds	r2, r3, #1
 8002678:	2030      	movs	r0, #48	; 0x30
 800267a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800267e:	4422      	add	r2, r4
 8002680:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002684:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002688:	3302      	adds	r3, #2
 800268a:	e7c7      	b.n	800261c <_printf_common+0x58>
 800268c:	2301      	movs	r3, #1
 800268e:	4622      	mov	r2, r4
 8002690:	4649      	mov	r1, r9
 8002692:	4638      	mov	r0, r7
 8002694:	47c0      	blx	r8
 8002696:	3001      	adds	r0, #1
 8002698:	d0e6      	beq.n	8002668 <_printf_common+0xa4>
 800269a:	3601      	adds	r6, #1
 800269c:	e7d9      	b.n	8002652 <_printf_common+0x8e>
	...

080026a0 <_printf_i>:
 80026a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80026a4:	7e0f      	ldrb	r7, [r1, #24]
 80026a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80026a8:	2f78      	cmp	r7, #120	; 0x78
 80026aa:	4691      	mov	r9, r2
 80026ac:	4680      	mov	r8, r0
 80026ae:	460c      	mov	r4, r1
 80026b0:	469a      	mov	sl, r3
 80026b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80026b6:	d807      	bhi.n	80026c8 <_printf_i+0x28>
 80026b8:	2f62      	cmp	r7, #98	; 0x62
 80026ba:	d80a      	bhi.n	80026d2 <_printf_i+0x32>
 80026bc:	2f00      	cmp	r7, #0
 80026be:	f000 80d8 	beq.w	8002872 <_printf_i+0x1d2>
 80026c2:	2f58      	cmp	r7, #88	; 0x58
 80026c4:	f000 80a3 	beq.w	800280e <_printf_i+0x16e>
 80026c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80026d0:	e03a      	b.n	8002748 <_printf_i+0xa8>
 80026d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80026d6:	2b15      	cmp	r3, #21
 80026d8:	d8f6      	bhi.n	80026c8 <_printf_i+0x28>
 80026da:	a101      	add	r1, pc, #4	; (adr r1, 80026e0 <_printf_i+0x40>)
 80026dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80026e0:	08002739 	.word	0x08002739
 80026e4:	0800274d 	.word	0x0800274d
 80026e8:	080026c9 	.word	0x080026c9
 80026ec:	080026c9 	.word	0x080026c9
 80026f0:	080026c9 	.word	0x080026c9
 80026f4:	080026c9 	.word	0x080026c9
 80026f8:	0800274d 	.word	0x0800274d
 80026fc:	080026c9 	.word	0x080026c9
 8002700:	080026c9 	.word	0x080026c9
 8002704:	080026c9 	.word	0x080026c9
 8002708:	080026c9 	.word	0x080026c9
 800270c:	08002859 	.word	0x08002859
 8002710:	0800277d 	.word	0x0800277d
 8002714:	0800283b 	.word	0x0800283b
 8002718:	080026c9 	.word	0x080026c9
 800271c:	080026c9 	.word	0x080026c9
 8002720:	0800287b 	.word	0x0800287b
 8002724:	080026c9 	.word	0x080026c9
 8002728:	0800277d 	.word	0x0800277d
 800272c:	080026c9 	.word	0x080026c9
 8002730:	080026c9 	.word	0x080026c9
 8002734:	08002843 	.word	0x08002843
 8002738:	682b      	ldr	r3, [r5, #0]
 800273a:	1d1a      	adds	r2, r3, #4
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	602a      	str	r2, [r5, #0]
 8002740:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002744:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002748:	2301      	movs	r3, #1
 800274a:	e0a3      	b.n	8002894 <_printf_i+0x1f4>
 800274c:	6820      	ldr	r0, [r4, #0]
 800274e:	6829      	ldr	r1, [r5, #0]
 8002750:	0606      	lsls	r6, r0, #24
 8002752:	f101 0304 	add.w	r3, r1, #4
 8002756:	d50a      	bpl.n	800276e <_printf_i+0xce>
 8002758:	680e      	ldr	r6, [r1, #0]
 800275a:	602b      	str	r3, [r5, #0]
 800275c:	2e00      	cmp	r6, #0
 800275e:	da03      	bge.n	8002768 <_printf_i+0xc8>
 8002760:	232d      	movs	r3, #45	; 0x2d
 8002762:	4276      	negs	r6, r6
 8002764:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002768:	485e      	ldr	r0, [pc, #376]	; (80028e4 <_printf_i+0x244>)
 800276a:	230a      	movs	r3, #10
 800276c:	e019      	b.n	80027a2 <_printf_i+0x102>
 800276e:	680e      	ldr	r6, [r1, #0]
 8002770:	602b      	str	r3, [r5, #0]
 8002772:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002776:	bf18      	it	ne
 8002778:	b236      	sxthne	r6, r6
 800277a:	e7ef      	b.n	800275c <_printf_i+0xbc>
 800277c:	682b      	ldr	r3, [r5, #0]
 800277e:	6820      	ldr	r0, [r4, #0]
 8002780:	1d19      	adds	r1, r3, #4
 8002782:	6029      	str	r1, [r5, #0]
 8002784:	0601      	lsls	r1, r0, #24
 8002786:	d501      	bpl.n	800278c <_printf_i+0xec>
 8002788:	681e      	ldr	r6, [r3, #0]
 800278a:	e002      	b.n	8002792 <_printf_i+0xf2>
 800278c:	0646      	lsls	r6, r0, #25
 800278e:	d5fb      	bpl.n	8002788 <_printf_i+0xe8>
 8002790:	881e      	ldrh	r6, [r3, #0]
 8002792:	4854      	ldr	r0, [pc, #336]	; (80028e4 <_printf_i+0x244>)
 8002794:	2f6f      	cmp	r7, #111	; 0x6f
 8002796:	bf0c      	ite	eq
 8002798:	2308      	moveq	r3, #8
 800279a:	230a      	movne	r3, #10
 800279c:	2100      	movs	r1, #0
 800279e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80027a2:	6865      	ldr	r5, [r4, #4]
 80027a4:	60a5      	str	r5, [r4, #8]
 80027a6:	2d00      	cmp	r5, #0
 80027a8:	bfa2      	ittt	ge
 80027aa:	6821      	ldrge	r1, [r4, #0]
 80027ac:	f021 0104 	bicge.w	r1, r1, #4
 80027b0:	6021      	strge	r1, [r4, #0]
 80027b2:	b90e      	cbnz	r6, 80027b8 <_printf_i+0x118>
 80027b4:	2d00      	cmp	r5, #0
 80027b6:	d04d      	beq.n	8002854 <_printf_i+0x1b4>
 80027b8:	4615      	mov	r5, r2
 80027ba:	fbb6 f1f3 	udiv	r1, r6, r3
 80027be:	fb03 6711 	mls	r7, r3, r1, r6
 80027c2:	5dc7      	ldrb	r7, [r0, r7]
 80027c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80027c8:	4637      	mov	r7, r6
 80027ca:	42bb      	cmp	r3, r7
 80027cc:	460e      	mov	r6, r1
 80027ce:	d9f4      	bls.n	80027ba <_printf_i+0x11a>
 80027d0:	2b08      	cmp	r3, #8
 80027d2:	d10b      	bne.n	80027ec <_printf_i+0x14c>
 80027d4:	6823      	ldr	r3, [r4, #0]
 80027d6:	07de      	lsls	r6, r3, #31
 80027d8:	d508      	bpl.n	80027ec <_printf_i+0x14c>
 80027da:	6923      	ldr	r3, [r4, #16]
 80027dc:	6861      	ldr	r1, [r4, #4]
 80027de:	4299      	cmp	r1, r3
 80027e0:	bfde      	ittt	le
 80027e2:	2330      	movle	r3, #48	; 0x30
 80027e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80027e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80027ec:	1b52      	subs	r2, r2, r5
 80027ee:	6122      	str	r2, [r4, #16]
 80027f0:	f8cd a000 	str.w	sl, [sp]
 80027f4:	464b      	mov	r3, r9
 80027f6:	aa03      	add	r2, sp, #12
 80027f8:	4621      	mov	r1, r4
 80027fa:	4640      	mov	r0, r8
 80027fc:	f7ff fee2 	bl	80025c4 <_printf_common>
 8002800:	3001      	adds	r0, #1
 8002802:	d14c      	bne.n	800289e <_printf_i+0x1fe>
 8002804:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002808:	b004      	add	sp, #16
 800280a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800280e:	4835      	ldr	r0, [pc, #212]	; (80028e4 <_printf_i+0x244>)
 8002810:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8002814:	6829      	ldr	r1, [r5, #0]
 8002816:	6823      	ldr	r3, [r4, #0]
 8002818:	f851 6b04 	ldr.w	r6, [r1], #4
 800281c:	6029      	str	r1, [r5, #0]
 800281e:	061d      	lsls	r5, r3, #24
 8002820:	d514      	bpl.n	800284c <_printf_i+0x1ac>
 8002822:	07df      	lsls	r7, r3, #31
 8002824:	bf44      	itt	mi
 8002826:	f043 0320 	orrmi.w	r3, r3, #32
 800282a:	6023      	strmi	r3, [r4, #0]
 800282c:	b91e      	cbnz	r6, 8002836 <_printf_i+0x196>
 800282e:	6823      	ldr	r3, [r4, #0]
 8002830:	f023 0320 	bic.w	r3, r3, #32
 8002834:	6023      	str	r3, [r4, #0]
 8002836:	2310      	movs	r3, #16
 8002838:	e7b0      	b.n	800279c <_printf_i+0xfc>
 800283a:	6823      	ldr	r3, [r4, #0]
 800283c:	f043 0320 	orr.w	r3, r3, #32
 8002840:	6023      	str	r3, [r4, #0]
 8002842:	2378      	movs	r3, #120	; 0x78
 8002844:	4828      	ldr	r0, [pc, #160]	; (80028e8 <_printf_i+0x248>)
 8002846:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800284a:	e7e3      	b.n	8002814 <_printf_i+0x174>
 800284c:	0659      	lsls	r1, r3, #25
 800284e:	bf48      	it	mi
 8002850:	b2b6      	uxthmi	r6, r6
 8002852:	e7e6      	b.n	8002822 <_printf_i+0x182>
 8002854:	4615      	mov	r5, r2
 8002856:	e7bb      	b.n	80027d0 <_printf_i+0x130>
 8002858:	682b      	ldr	r3, [r5, #0]
 800285a:	6826      	ldr	r6, [r4, #0]
 800285c:	6961      	ldr	r1, [r4, #20]
 800285e:	1d18      	adds	r0, r3, #4
 8002860:	6028      	str	r0, [r5, #0]
 8002862:	0635      	lsls	r5, r6, #24
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	d501      	bpl.n	800286c <_printf_i+0x1cc>
 8002868:	6019      	str	r1, [r3, #0]
 800286a:	e002      	b.n	8002872 <_printf_i+0x1d2>
 800286c:	0670      	lsls	r0, r6, #25
 800286e:	d5fb      	bpl.n	8002868 <_printf_i+0x1c8>
 8002870:	8019      	strh	r1, [r3, #0]
 8002872:	2300      	movs	r3, #0
 8002874:	6123      	str	r3, [r4, #16]
 8002876:	4615      	mov	r5, r2
 8002878:	e7ba      	b.n	80027f0 <_printf_i+0x150>
 800287a:	682b      	ldr	r3, [r5, #0]
 800287c:	1d1a      	adds	r2, r3, #4
 800287e:	602a      	str	r2, [r5, #0]
 8002880:	681d      	ldr	r5, [r3, #0]
 8002882:	6862      	ldr	r2, [r4, #4]
 8002884:	2100      	movs	r1, #0
 8002886:	4628      	mov	r0, r5
 8002888:	f7fd fca2 	bl	80001d0 <memchr>
 800288c:	b108      	cbz	r0, 8002892 <_printf_i+0x1f2>
 800288e:	1b40      	subs	r0, r0, r5
 8002890:	6060      	str	r0, [r4, #4]
 8002892:	6863      	ldr	r3, [r4, #4]
 8002894:	6123      	str	r3, [r4, #16]
 8002896:	2300      	movs	r3, #0
 8002898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800289c:	e7a8      	b.n	80027f0 <_printf_i+0x150>
 800289e:	6923      	ldr	r3, [r4, #16]
 80028a0:	462a      	mov	r2, r5
 80028a2:	4649      	mov	r1, r9
 80028a4:	4640      	mov	r0, r8
 80028a6:	47d0      	blx	sl
 80028a8:	3001      	adds	r0, #1
 80028aa:	d0ab      	beq.n	8002804 <_printf_i+0x164>
 80028ac:	6823      	ldr	r3, [r4, #0]
 80028ae:	079b      	lsls	r3, r3, #30
 80028b0:	d413      	bmi.n	80028da <_printf_i+0x23a>
 80028b2:	68e0      	ldr	r0, [r4, #12]
 80028b4:	9b03      	ldr	r3, [sp, #12]
 80028b6:	4298      	cmp	r0, r3
 80028b8:	bfb8      	it	lt
 80028ba:	4618      	movlt	r0, r3
 80028bc:	e7a4      	b.n	8002808 <_printf_i+0x168>
 80028be:	2301      	movs	r3, #1
 80028c0:	4632      	mov	r2, r6
 80028c2:	4649      	mov	r1, r9
 80028c4:	4640      	mov	r0, r8
 80028c6:	47d0      	blx	sl
 80028c8:	3001      	adds	r0, #1
 80028ca:	d09b      	beq.n	8002804 <_printf_i+0x164>
 80028cc:	3501      	adds	r5, #1
 80028ce:	68e3      	ldr	r3, [r4, #12]
 80028d0:	9903      	ldr	r1, [sp, #12]
 80028d2:	1a5b      	subs	r3, r3, r1
 80028d4:	42ab      	cmp	r3, r5
 80028d6:	dcf2      	bgt.n	80028be <_printf_i+0x21e>
 80028d8:	e7eb      	b.n	80028b2 <_printf_i+0x212>
 80028da:	2500      	movs	r5, #0
 80028dc:	f104 0619 	add.w	r6, r4, #25
 80028e0:	e7f5      	b.n	80028ce <_printf_i+0x22e>
 80028e2:	bf00      	nop
 80028e4:	08002b35 	.word	0x08002b35
 80028e8:	08002b46 	.word	0x08002b46

080028ec <_sbrk_r>:
 80028ec:	b538      	push	{r3, r4, r5, lr}
 80028ee:	4d06      	ldr	r5, [pc, #24]	; (8002908 <_sbrk_r+0x1c>)
 80028f0:	2300      	movs	r3, #0
 80028f2:	4604      	mov	r4, r0
 80028f4:	4608      	mov	r0, r1
 80028f6:	602b      	str	r3, [r5, #0]
 80028f8:	f7fe feca 	bl	8001690 <_sbrk>
 80028fc:	1c43      	adds	r3, r0, #1
 80028fe:	d102      	bne.n	8002906 <_sbrk_r+0x1a>
 8002900:	682b      	ldr	r3, [r5, #0]
 8002902:	b103      	cbz	r3, 8002906 <_sbrk_r+0x1a>
 8002904:	6023      	str	r3, [r4, #0]
 8002906:	bd38      	pop	{r3, r4, r5, pc}
 8002908:	200001c0 	.word	0x200001c0

0800290c <__sread>:
 800290c:	b510      	push	{r4, lr}
 800290e:	460c      	mov	r4, r1
 8002910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002914:	f000 f88e 	bl	8002a34 <_read_r>
 8002918:	2800      	cmp	r0, #0
 800291a:	bfab      	itete	ge
 800291c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800291e:	89a3      	ldrhlt	r3, [r4, #12]
 8002920:	181b      	addge	r3, r3, r0
 8002922:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002926:	bfac      	ite	ge
 8002928:	6563      	strge	r3, [r4, #84]	; 0x54
 800292a:	81a3      	strhlt	r3, [r4, #12]
 800292c:	bd10      	pop	{r4, pc}

0800292e <__swrite>:
 800292e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002932:	461f      	mov	r7, r3
 8002934:	898b      	ldrh	r3, [r1, #12]
 8002936:	05db      	lsls	r3, r3, #23
 8002938:	4605      	mov	r5, r0
 800293a:	460c      	mov	r4, r1
 800293c:	4616      	mov	r6, r2
 800293e:	d505      	bpl.n	800294c <__swrite+0x1e>
 8002940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002944:	2302      	movs	r3, #2
 8002946:	2200      	movs	r2, #0
 8002948:	f000 f856 	bl	80029f8 <_lseek_r>
 800294c:	89a3      	ldrh	r3, [r4, #12]
 800294e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002952:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002956:	81a3      	strh	r3, [r4, #12]
 8002958:	4632      	mov	r2, r6
 800295a:	463b      	mov	r3, r7
 800295c:	4628      	mov	r0, r5
 800295e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002962:	f7fe baa7 	b.w	8000eb4 <_write_r>

08002966 <__sseek>:
 8002966:	b510      	push	{r4, lr}
 8002968:	460c      	mov	r4, r1
 800296a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800296e:	f000 f843 	bl	80029f8 <_lseek_r>
 8002972:	1c43      	adds	r3, r0, #1
 8002974:	89a3      	ldrh	r3, [r4, #12]
 8002976:	bf15      	itete	ne
 8002978:	6560      	strne	r0, [r4, #84]	; 0x54
 800297a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800297e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002982:	81a3      	strheq	r3, [r4, #12]
 8002984:	bf18      	it	ne
 8002986:	81a3      	strhne	r3, [r4, #12]
 8002988:	bd10      	pop	{r4, pc}

0800298a <__sclose>:
 800298a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800298e:	f000 b801 	b.w	8002994 <_close_r>
	...

08002994 <_close_r>:
 8002994:	b538      	push	{r3, r4, r5, lr}
 8002996:	4d06      	ldr	r5, [pc, #24]	; (80029b0 <_close_r+0x1c>)
 8002998:	2300      	movs	r3, #0
 800299a:	4604      	mov	r4, r0
 800299c:	4608      	mov	r0, r1
 800299e:	602b      	str	r3, [r5, #0]
 80029a0:	f7fe fe41 	bl	8001626 <_close>
 80029a4:	1c43      	adds	r3, r0, #1
 80029a6:	d102      	bne.n	80029ae <_close_r+0x1a>
 80029a8:	682b      	ldr	r3, [r5, #0]
 80029aa:	b103      	cbz	r3, 80029ae <_close_r+0x1a>
 80029ac:	6023      	str	r3, [r4, #0]
 80029ae:	bd38      	pop	{r3, r4, r5, pc}
 80029b0:	200001c0 	.word	0x200001c0

080029b4 <_fstat_r>:
 80029b4:	b538      	push	{r3, r4, r5, lr}
 80029b6:	4d07      	ldr	r5, [pc, #28]	; (80029d4 <_fstat_r+0x20>)
 80029b8:	2300      	movs	r3, #0
 80029ba:	4604      	mov	r4, r0
 80029bc:	4608      	mov	r0, r1
 80029be:	4611      	mov	r1, r2
 80029c0:	602b      	str	r3, [r5, #0]
 80029c2:	f7fe fe3c 	bl	800163e <_fstat>
 80029c6:	1c43      	adds	r3, r0, #1
 80029c8:	d102      	bne.n	80029d0 <_fstat_r+0x1c>
 80029ca:	682b      	ldr	r3, [r5, #0]
 80029cc:	b103      	cbz	r3, 80029d0 <_fstat_r+0x1c>
 80029ce:	6023      	str	r3, [r4, #0]
 80029d0:	bd38      	pop	{r3, r4, r5, pc}
 80029d2:	bf00      	nop
 80029d4:	200001c0 	.word	0x200001c0

080029d8 <_isatty_r>:
 80029d8:	b538      	push	{r3, r4, r5, lr}
 80029da:	4d06      	ldr	r5, [pc, #24]	; (80029f4 <_isatty_r+0x1c>)
 80029dc:	2300      	movs	r3, #0
 80029de:	4604      	mov	r4, r0
 80029e0:	4608      	mov	r0, r1
 80029e2:	602b      	str	r3, [r5, #0]
 80029e4:	f7fe fe3b 	bl	800165e <_isatty>
 80029e8:	1c43      	adds	r3, r0, #1
 80029ea:	d102      	bne.n	80029f2 <_isatty_r+0x1a>
 80029ec:	682b      	ldr	r3, [r5, #0]
 80029ee:	b103      	cbz	r3, 80029f2 <_isatty_r+0x1a>
 80029f0:	6023      	str	r3, [r4, #0]
 80029f2:	bd38      	pop	{r3, r4, r5, pc}
 80029f4:	200001c0 	.word	0x200001c0

080029f8 <_lseek_r>:
 80029f8:	b538      	push	{r3, r4, r5, lr}
 80029fa:	4d07      	ldr	r5, [pc, #28]	; (8002a18 <_lseek_r+0x20>)
 80029fc:	4604      	mov	r4, r0
 80029fe:	4608      	mov	r0, r1
 8002a00:	4611      	mov	r1, r2
 8002a02:	2200      	movs	r2, #0
 8002a04:	602a      	str	r2, [r5, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	f7fe fe34 	bl	8001674 <_lseek>
 8002a0c:	1c43      	adds	r3, r0, #1
 8002a0e:	d102      	bne.n	8002a16 <_lseek_r+0x1e>
 8002a10:	682b      	ldr	r3, [r5, #0]
 8002a12:	b103      	cbz	r3, 8002a16 <_lseek_r+0x1e>
 8002a14:	6023      	str	r3, [r4, #0]
 8002a16:	bd38      	pop	{r3, r4, r5, pc}
 8002a18:	200001c0 	.word	0x200001c0

08002a1c <__malloc_lock>:
 8002a1c:	4801      	ldr	r0, [pc, #4]	; (8002a24 <__malloc_lock+0x8>)
 8002a1e:	f7ff bb27 	b.w	8002070 <__retarget_lock_acquire_recursive>
 8002a22:	bf00      	nop
 8002a24:	200001b4 	.word	0x200001b4

08002a28 <__malloc_unlock>:
 8002a28:	4801      	ldr	r0, [pc, #4]	; (8002a30 <__malloc_unlock+0x8>)
 8002a2a:	f7ff bb22 	b.w	8002072 <__retarget_lock_release_recursive>
 8002a2e:	bf00      	nop
 8002a30:	200001b4 	.word	0x200001b4

08002a34 <_read_r>:
 8002a34:	b538      	push	{r3, r4, r5, lr}
 8002a36:	4d07      	ldr	r5, [pc, #28]	; (8002a54 <_read_r+0x20>)
 8002a38:	4604      	mov	r4, r0
 8002a3a:	4608      	mov	r0, r1
 8002a3c:	4611      	mov	r1, r2
 8002a3e:	2200      	movs	r2, #0
 8002a40:	602a      	str	r2, [r5, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	f7fe fdd2 	bl	80015ec <_read>
 8002a48:	1c43      	adds	r3, r0, #1
 8002a4a:	d102      	bne.n	8002a52 <_read_r+0x1e>
 8002a4c:	682b      	ldr	r3, [r5, #0]
 8002a4e:	b103      	cbz	r3, 8002a52 <_read_r+0x1e>
 8002a50:	6023      	str	r3, [r4, #0]
 8002a52:	bd38      	pop	{r3, r4, r5, pc}
 8002a54:	200001c0 	.word	0x200001c0

08002a58 <_init>:
 8002a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a5a:	bf00      	nop
 8002a5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a5e:	bc08      	pop	{r3}
 8002a60:	469e      	mov	lr, r3
 8002a62:	4770      	bx	lr

08002a64 <_fini>:
 8002a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a66:	bf00      	nop
 8002a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a6a:	bc08      	pop	{r3}
 8002a6c:	469e      	mov	lr, r3
 8002a6e:	4770      	bx	lr
